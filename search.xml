<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于itsNeko开源博客食用方法</title>
    <url>/posts/itsneko-opensource-blog.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：本文是关于itsNeko开源博客食用方法详解，感谢使用本开源博客。时间过的好快，还好我都记录下来了。</div>

<h3 id="itsNeko开源介绍"><a href="#itsNeko开源介绍" class="headerlink" title="itsNeko开源介绍"></a>itsNeko开源介绍</h3><ul>
<li>基于<br>itsNeko开源博客是基于Hexo博客Matery主题魔改，感谢各位对本博客的喜爱与支持。</li>
<li>作者<br>Hello，itsNeko，我是本博客的作者，itsNeko博主博客: <a href="https://dyfa.top/" target="_blank">itsNeko博客~</a></li>
<li>赞赏<br>如果你觉得本开源博客还可以，欢迎大家的赞赏，赞赏二维码见页面：<a href="https://dyfa.top/donate/" target="_blank">赞赏itsNeko开源博主~</a></li>
<li>提示<br>本博客为纯静态，无数据库，文章使用markdown格式，图片存在json里面，整体打包上传至服务器即可。</li>
<li>建议<br>最好懂一点编程知识，建议使用VsCode，善于使用<code>“ ctrl+F ”</code>快捷键定位然后修改自定义内容。</li>
</ul>
<h3 id="源码下载及命令"><a href="#源码下载及命令" class="headerlink" title="源码下载及命令"></a>源码下载及命令</h3><ul>
<li>本开源博客源码已公开在在博主的GitHub仓库，国内也可使用Gitee，希望得到各位的<code>小星星，Star</code>。</li>
<li>GitHub仓库：<a href="https://github.com/nekodeng/hexo-theme-itsneko.git" target="_blank">itsNeko开源博客源码GitHub地址</a></li>
<li><p>Gitee仓库：<a href="https://gitee.com/nekodeng/hexo-theme-itsneko.git" target="_blank">itsNeko开源博客源码Gitee地址</a></p>
</li>
<li><p>首先，新建一个文件夹名为“ <code>nekoblog</code> ”，在该文件夹下打开git bash，执行命令行</p>
</li>
</ul>
<pre><code>git clone https://github.com/nekodeng/hexo-theme-itsneko.git

或者使用国内的gitee

git clone https://gitee.com/nekodeng/hexo-theme-itsneko.git
</code></pre><ul>
<li>将下载的整个文件夹在VsCode中打开，在终端中依次执行以下命令行</li>
</ul>
<pre><code>npm install
hexo clean
hexo g
hexo s
</code></pre><ul>
<li>然后在浏览器中，打开“ <a href="http://localhost:4000/">http://localhost:4000/</a> ”，即可实时预览网站，再依次修改网站内容。</li>
</ul>
<p>注意：依次执行完上述4条命令后，若遇到报错极大概率是npm install的问题，也可能是网络问题，建议删除整个“ node_modules ”文件夹，然后重新执行上述命令行。</p>
<h3 id="各页面配置详解"><a href="#各页面配置详解" class="headerlink" title="各页面配置详解"></a>各页面配置详解</h3><h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><h5 id="1、网站标题描述等"><a href="#1、网站标题描述等" class="headerlink" title="1、网站标题描述等"></a>1、网站标题描述等</h5><p>在<code>/nekoblog/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ Site ”</code>，然后自行修改内容。</p>
<h5 id="2、logo图片与logo字体"><a href="#2、logo图片与logo字体" class="headerlink" title="2、logo图片与logo字体"></a>2、logo图片与logo字体</h5><ul>
<li>logo图片:<br>在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 配置网站favicon和网站LOGO ”</code>，然后自行修改图片并注意图片格式（此处建议图片大小为180*116最佳）。</li>
<li>logo字体:<br>在<code>/themes/layout/_partial/header.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ itsNeko-openSource-Blog ”</code>，然后自行修改大屏幕和小屏幕下logo字体（此处建议小屏下字体数目不宜过多）。 </li>
</ul>
<h5 id="3、banner图上打字效果字体"><a href="#3、banner图上打字效果字体" class="headerlink" title="3、banner图上打字效果字体"></a>3、banner图上打字效果字体</h5><p>在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ sub1 ”</code>，然后自行修改。</p>
<h5 id="4、《质数的孤独》内容部分"><a href="#4、《质数的孤独》内容部分" class="headerlink" title="4、《质数的孤独》内容部分"></a>4、《质数的孤独》内容部分</h5><p>在<code>/themes/layout/_widget/dream.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 《质数的孤独》 ”</code>，然后自行修改标题和内容。</p>
<h5 id="5、公告栏作者等内容部分"><a href="#5、公告栏作者等内容部分" class="headerlink" title="5、公告栏作者等内容部分"></a>5、公告栏作者等内容部分</h5><p>在<code>/themes/layout/index.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 公告文字栏开始 ”</code>，然后自行修改内容。</p>
<h5 id="6、footer内容部分"><a href="#6、footer内容部分" class="headerlink" title="6、footer内容部分"></a>6、footer内容部分</h5><p>在<code>/themes/layout/_partial/footer.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 版权信息 ”</code>，然后自行修改各类内容；此处还要在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ socialLink ”</code>，然后自行修改。</p>
<h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><h5 id="1、配置个人信息"><a href="#1、配置个人信息" class="headerlink" title="1、配置个人信息"></a>1、配置个人信息</h5><p>在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ profile ”</code>，然后自行修改头像、职业和个人介绍。</p>
<h5 id="2、个人介绍内容"><a href="#2、个人介绍内容" class="headerlink" title="2、个人介绍内容"></a>2、个人介绍内容</h5><p>在<code>/themes/layout/about.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 关于我哦 ”</code>，然后自行个人介绍介绍。</p>
<h4 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h4><h5 id="1、页面介绍"><a href="#1、页面介绍" class="headerlink" title="1、页面介绍"></a>1、页面介绍</h5><p>在<code>/themes/layout/galley.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ itsNeko开源博客相册 ”</code>，然后自行修改此内容。</p>
<h5 id="2、相册数据"><a href="#2、相册数据" class="headerlink" title="2、相册数据"></a>2、相册数据</h5><p>相册是存在json里面的，在<code>/nekoblog/source/_data/galley.json</code>文件中。一个相册就是在一个{}对象内的json数据。</p>
<h5 id="3、新建一个相册流程"><a href="#3、新建一个相册流程" class="headerlink" title="3、新建一个相册流程"></a>3、新建一个相册流程</h5><ul>
<li>首先，找到<code>/nekoblog/source/galley</code>文件夹。</li>
<li>复制已存在的“ itsNeko博主的绘画作品 ”文件夹，并取名。</li>
<li>打开新取名文件夹下的index.md文件，然后修改title字段必须与新取名文件夹名称相同，否则运行报错。</li>
<li>然后，在<code>/nekoblog/source/_data/galley.json</code>文件中，复制已存在的{}对象内的json数据，与第一段并以逗号区隔，然后修改新相册的各类内容。并注意：<code>name，url_name，album内的title这三个字段内容必须与新取名文件夹名称相同，否则运行报错。</code></li>
</ul>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="增加友情链接"><a href="#增加友情链接" class="headerlink" title="增加友情链接"></a>增加友情链接</h5><ul>
<li>友链信息是存储在<code>/nekoblog/source/_data/friends.json</code>文件中，一个友链就是在一个{}对象内的json数据，自行增添。</li>
</ul>
<h5 id="增加网址收藏"><a href="#增加网址收藏" class="headerlink" title="增加网址收藏"></a>增加网址收藏</h5><ul>
<li>网址收藏信息是存储在<code>/nekoblog/source/_data/collection.json</code>文件中，一个网址信息就是在一个{}对象内的json数据，自行增添。</li>
</ul>
<h4 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h4><p>其余页面自定义修改的内容不多，或者没必要修改，这里给出其余页面的对应文件，可自行根据需要定位到对应页面文件中进行修改。</p>
<ul>
<li><code>书单 -&gt; /themes/layout/books.ejs</code></li>
<li><code>留言板 -&gt; /themes/layout/contact.ejs</code></li>
<li><code>实战项目 -&gt; /themes/layout/project.ejs</code></li>
<li><code>博客打赏记录 -&gt; /themes/layout/donate.ejs</code></li>
<li><code>ticktack -&gt; /themes/layout/ticktack.ejs</code></li>
<li><code>实战项目 -&gt; /themes/layout/project.ejs</code></li>
<li><code>vlog -&gt; /themes/layout/videos.ejs</code><br>使用“ ctrl+F ”快捷键定位到<code>“ src=”//player.bilibili ”</code>，然后自行修改两个视频的src，建议使用B站的外链。</li>
<li><code>music -&gt; /themes/layout/musics.ejs</code><br>使用“ ctrl+F ”快捷键定位到<code>“ id=” ”</code>，然后自行修改两个歌单的id，建议使用网易云和QQ音乐的外链。</li>
<li><code>urls.txt -&gt; /nekoblog/urls.txt</code>将内容替换成自己网站的url地址即可。</li>
<li><code>网站2个_config.yml文件 -&gt; 主要是网站的总体配置，自行打开两个文件然后只修改里面的包含个人信息的部分，其余不动。</code></li>
</ul>
<h3 id="撰写第一篇文章"><a href="#撰写第一篇文章" class="headerlink" title="撰写第一篇文章"></a>撰写第一篇文章</h3><ul>
<li>修改完个人信息后，你便可以撰写属于你的第一篇文章啦。</li>
<li>文章采用markdown语法，所有文章存储在<code>/nekoblog/source/_posts</code>文件夹中。</li>
<li>这里我已给出常用的两类文章模板，可直接复制粘贴然后（修改文章名，链接后缀建议用英文，标签建议只用一个，分类，时间，以及文章banner图片）形成新的文章。</li>
</ul>
<h3 id="怎样开通评论"><a href="#怎样开通评论" class="headerlink" title="怎样开通评论"></a>怎样开通评论</h3><ul>
<li>本开源博客使用valine评论，环境以及搭好，只需填写valine配置数据即可。</li>
<li>自行根据网上教程得到配置数据，关键词 “ Hexo 博客添加 Valine 评论系统 ”，教程之一：<a href="https://www.zhyong.cn/posts/95cb/" target="_blank">Hexo 博客添加 Valine 评论系统</a></li>
<li>注意：本开源博客中已经搭好了环境，<code>比如valine.min.js，valine.ejs等文件已经存在，不用再根据教程添加这些文件</code>，只需根据教程步骤配置其余，然后获取到 APP ID 和 APP KEY。</li>
<li>然后，将获取到的 APP ID 和 APP KEY，在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ valine ”</code>，然后自行修改appId，appKey值即可。</li>
<li>多说一句，若最后评论功能总是报错，不知道怎么弄，那么建议一切根据外链教程（这个不行，换个完整版教程）操作，可替换本博客已经存在的环境文件，<code>学会自己独立使用浏览器解决问题</code>。</li>
</ul>
<h3 id="网站怎样上线"><a href="#网站怎样上线" class="headerlink" title="网站怎样上线"></a>网站怎样上线</h3><ul>
<li><p><code>免费版 使用gitee免费托管</code><br>关键词，“ Hexo部署到Gitee ”，随机教程：<a href="https://blog.csdn.net/qq_38157825/article/details/112783631" target="_blank">Hexo 部署到 Gitee</a></p>
</li>
<li><p><code>收费版 自行购买域名服务器</code><br>关键词，“ Hexo部署到自己服务器 ”</p>
</li>
</ul>
<h3 id="七零八碎补充"><a href="#七零八碎补充" class="headerlink" title="七零八碎补充"></a>七零八碎补充</h3><p>可自行根据需要定位到对应文件中进行修改。</p>
<ul>
<li><p><code>赞赏二维码图片 -&gt; /themes/source/medias/reward</code></p>
</li>
<li><p><code>鼠标左键点击文字 -&gt; /themes/source/js/click_show_text.js</code></p>
</li>
<li><p><code>网站标题栏和footer栏背景颜色 -&gt; /themes/source/css/matery.css</code><br>在该文件中使用“ ctrl+F ”快捷键定位到<code>“ 网站标题栏和footer栏背景颜色 ”</code>，然后自行修改颜色。</p>
</li>
<li><p><code>各大页面banner图 -&gt; 若你不想使用默认图片，将以下代码复制到对应页面ejs文件中并修改图片链接即可。</code></p>
</li>
</ul>
<pre><code>    &lt;style&gt;
      /* banner背景图 */
      .bg-cover &amp;#123;
          background-image: url(&quot;图片链接地址&quot;)!important;
      &amp;#125;
    &lt;/style&gt;
</code></pre><h3 id="怎样联系itsNeko"><a href="#怎样联系itsNeko" class="headerlink" title="怎样联系itsNeko"></a>怎样联系itsNeko</h3><ul>
<li>留言：itsNeko博客地址:<a href="https://dyfa.top/" target="_blank">itsNeko博客~</a></li>
<li>邮箱：nekodeng@qq.com</li>
<li>QQ: 2018854221</li>
</ul>
]]></content>
      <categories>
        <category>itsNeko博客食用方法</category>
      </categories>
      <tags>
        <tag>关于itsNeko开源博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用</title>
    <url>/posts/git_article.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">Git是目前世界上最先进的分布式版本控制系统（没有之一）。Git 是一个开源的分布式版本控制软件,用以有效、高速的处理从很小到非常大的项目版本管理。</div>

<h3 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h3><ul>
<li>Git是目前世界上最先进的分布式版本控制系统（没有之一）</li>
<li>Git 是一个开源的分布式版本控制软件,用以有效、高速的处理从很小到非常大的项目版本管理。</li>
<li>下载网址：<a href="https://git-scm.com" class="LinkCard" target="_blank">https://git-scm.com</a></li>
</ul>
<h3 id="从gitee或者github上边拉取项目"><a href="#从gitee或者github上边拉取项目" class="headerlink" title="从gitee或者github上边拉取项目"></a>从gitee或者github上边拉取项目</h3><ul>
<li>打开要拉取下来的仓库，克隆地址或下载安装包<br><img src="https://img.tvv.tw/2022/03/13/150c2f33d1da5.png" alt="克隆地址"></li>
<li>新建项目文件夹，右键打开<code>Git Bash Here</code></li>
<li>输入命令：<code>git clone 复制的仓库地址</code><pre><code>git clone 复制的仓库名称
</code></pre></li>
<li>若下载安装包(zip)，需要先初始化Git仓库</li>
</ul>
<h3 id="初始化Git仓库"><a href="#初始化Git仓库" class="headerlink" title="初始化Git仓库"></a>初始化Git仓库</h3><ul>
<li>打开项目文件夹，右键点击<code>Git Bash Here</code></li>
<li>输入命令：<code>git init</code><pre><code>git init
</code></pre></li>
</ul>
<h3 id="与远程仓库建立连接"><a href="#与远程仓库建立连接" class="headerlink" title="与远程仓库建立连接"></a>与远程仓库建立连接</h3><ul>
<li><code>git remote add origin 仓库地址 </code><pre><code>git remote add origin 仓库地址 //添加后，远程库的名字就是origin
</code></pre></li>
<li>下一步，就可以把本地库的所有内容推送到远程库上：<code>git push -u origin master</code><pre><code>git push -u origin master
//加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
</code></pre></li>
</ul>
<h3 id="配置基本信息"><a href="#配置基本信息" class="headerlink" title="配置基本信息"></a>配置基本信息</h3><ul>
<li>第一次在用，需要配置信息</li>
<li>配置用户名命令：<code>git config —global user.name “xxx”</code></li>
<li>配置邮箱命令：<code>git config —global user.email “xxx@”</code><pre><code>git config --global user.name &quot;xxx&quot;
git config --global user.email &quot;xxx@&quot;
</code></pre></li>
</ul>
<h3 id="Git常用到的方法"><a href="#Git常用到的方法" class="headerlink" title="Git常用到的方法"></a>Git常用到的方法</h3><h4 id="1-创建分支命令"><a href="#1-创建分支命令" class="headerlink" title="1.创建分支命令"></a>1.创建分支命令</h4><ul>
<li>创建分支<code>git branch 分支名称</code></li>
<li>创建分支并切换到该分支<code>git checkout -b 分支名称</code>或<code>git switch -c 分支名称</code></li>
</ul>
<pre><code>git branch 分支名称 // 创建分支
git checkout 分支名称 或 git switch 分支名称// 切换到分支
&lt;!-- =============== --&gt;
git checkout -b 分支名称 或 git switch -c 分支名称// 创建分支并切换到该分支
</code></pre><h4 id="2-查看分支"><a href="#2-查看分支" class="headerlink" title="2.查看分支"></a>2.查看分支</h4><ul>
<li>查看本地分支命令：<code>git branch</code></li>
<li>查看远端分支命令：<code>git branch -r</code></li>
<li>查看本地&amp;远端分支：<code>git branch -a</code></li>
</ul>
<pre><code>git branch // 查看本地分支
git branch -r // 查看远端分支
git branch -a // 查看本地&amp;远端分支
</code></pre><h4 id="3-合并分支"><a href="#3-合并分支" class="headerlink" title="3.合并分支"></a>3.合并分支</h4><p>当我们做好改动后，需要切换到主分支master，然后合并</p>
<ul>
<li>合并分支命令：<code>git merge 分支名称</code></li>
</ul>
<h4 id="4-解决合并分支时的冲突"><a href="#4-解决合并分支时的冲突" class="headerlink" title="4.解决合并分支时的冲突"></a>4.解决合并分支时的冲突</h4><p>我们在合并分支的时候难免会遇到，与同事修改同一处地方，这时候就会有冲突，我们需要手动修改。<br><img src="https://img.tvv.tw/2022/03/13/bc2d3918a261e.png" alt="冲突"></p>
<h4 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5.删除分支"></a>5.删除分支</h4><ul>
<li>删除分支命令：<code>git branch -D </code>分支名称</li>
</ul>
<h4 id="6-提交到远端"><a href="#6-提交到远端" class="headerlink" title="6.提交到远端"></a>6.提交到远端</h4><ul>
<li>提交到暂存区命令：<ol>
<li>提交所有文件到暂存区命令：<code>git add .</code></li>
<li>提交某个文件到暂存区命令：<code>git add 文件名称</code></li>
</ol>
</li>
</ul>
<pre><code>git add . //提交所有文件到暂存区
git add 文件名称 //提交某个文件到暂存区
</code></pre><ul>
<li>提交到本地仓库命令：<code>git commit -m “提交信息描述”</code></li>
</ul>
<pre><code>git commit -m &quot;提交信息描述&quot;
</code></pre><ul>
<li>推送本地分支提交到远端命令：<code>git push origin -u 分支名称</code></li>
<li>第一次提交加-u 此后 <code>git push origin 分支名称</code></li>
</ul>
<pre><code>git push origin -u 分支名称 //第一次提交
git push origin 分支名称 // 此后
</code></pre><ul>
<li>提交时候可能会遇到的问题</li>
</ul>
<pre><code>error: failed to push some refs to &#39;git@github.com:michaelliao/learngit.git&#39;
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: &#39;git pull ...&#39;) before pushing again.
hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.
</code></pre><p>需要先<code>git pull</code>把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：</p>
<pre><code>git pull
// 可能会遇到的问题：
There is no tracking information for the current branch. 
Please specify which branch you want to merge with. 
// git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
$ git branch --set-upstream-to=origin/dev dev
再 git pull
</code></pre><h4 id="7-拉取远端分支到本地"><a href="#7-拉取远端分支到本地" class="headerlink" title="7.拉取远端分支到本地"></a>7.拉取远端分支到本地</h4><ul>
<li>第一次：<code>git checkout -b 本地分支 origin/远程分支</code></li>
<li>此后：<code>git checkout 远程分支</code></li>
</ul>
<h4 id="8-贮藏"><a href="#8-贮藏" class="headerlink" title="8.贮藏"></a>8.贮藏</h4><p>有时候我们再写代码的时候，领导会要我们修改个bug，我们代码又没有写完，不可提交。这时候就可以用贮藏来保存代码。改完bug再回来写我们的项目。</p>
<ul>
<li>建贮藏命令：<code>git stash save ‘描述’</code></li>
</ul>
<pre><code>git stash save &#39;描述&#39;
</code></pre><ul>
<li>查看贮藏命令：<code>git stash list</code></li>
</ul>
<pre><code>git stash list
</code></pre><ul>
<li>使用贮藏命令：<code>git stash apply stash@&#123;索引&#125;</code></li>
</ul>
<pre class=" language-lang-html"><code class="language-lang-html">git stash apply stash@&#123;索引&#125;
</code></pre>
<ul>
<li>删除贮藏命令：<code>git stash drop stash@&#123;索引&#125;</code></li>
</ul>
<pre class=" language-lang-html"><code class="language-lang-html">git stash drop stash@&#123;索引&#125;
</code></pre>
<h4 id="9-查看状态"><a href="#9-查看状态" class="headerlink" title="9.查看状态"></a>9.查看状态</h4><ul>
<li>查看当前工作状态命令：<code>git status</code> 看看那些需要更新</li>
<li>查看commit全部日志命令：<code>git log</code></li>
<li>查看commit日志命令一行(当提交数量很大的时候非常有用)：<code>git log —pretty=oneline </code></li>
</ul>
<h4 id="10-版本回滚"><a href="#10-版本回滚" class="headerlink" title="10.版本回滚"></a>10.版本回滚</h4><ul>
<li>恢复暂存区和HEAD一致命令：<code>git reset HEAD</code></li>
<li>恢复暂存区指定文件与HEAD一致命令：<code>git reset HEAD — 文件名</code></li>
<li>恢复工作区指定文件与暂存区一致命令：<code>git checkout — 文件名称</code></li>
<li>恢复工作区所有文件与暂存区一致命令：<code>git checkout .</code></li>
<li>回退到指定commit：<code>git reset —hard commit哈希值</code><h3 id="更详细的可阅读廖雪峰网站"><a href="#更详细的可阅读廖雪峰网站" class="headerlink" title="更详细的可阅读廖雪峰网站"></a>更详细的可阅读廖雪峰网站</h3><a href="https://www.liaoxuefeng.com/wiki/896043488029600" class="LinkCard" target="_blank">廖雪峰网站地址</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>这是随笔文章模板</title>
    <url>/posts/react_cli_ts.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">【React+TS】从零开始搭建react+typescript+router+redux+less+px2rem自适应+sass+axios反向代理+别名@+Antd-mobile</div>

<p>前提：你需要准备好node.js版本不低于6.14.8</p>
<h3 id="通过create-react-app脚手架搭建项目"><a href="#通过create-react-app脚手架搭建项目" class="headerlink" title="通过create-react-app脚手架搭建项目"></a>通过create-react-app脚手架搭建项目</h3><ol>
<li>打开文件夹，呼出cmd，输入搭建命令：<code>npx create-react-app 项目名称 —template typescript</code></li>
</ol>
<font color="red">注: 项目名称不可以出现大写字母</font>

<pre><code>npx create-react-app test --template typescript
</code></pre><p><img src="https://img.tvv.tw/2022/03/17/8327e52a8b540.png" alt="指令"></p>
<p><img src="https://img.tvv.tw/2022/03/17/eef7adb646d67.png" alt="成功"></p>
<ul>
<li>当你出现Happy hacking说明你下载成功了，vscode打开项目，可以看到顺利生成了react项目组件，后缀为tsx此时说明成功创建了react+typescript项目的雏形</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/9e549a4c54a84.png" alt="成功"></p>
<ol>
<li>进入项目更目录下，运行命令：<code>npm start</code>启动项目</li>
</ol>
<p><img src="https://img.tvv.tw/2022/03/17/f19fd1c725a60.png" alt="运行"></p>
<pre><code>npm start
</code></pre><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><ol>
<li>npm下载路由命令：<code>npm i react-router-dom@5.2.0 react-router-config @types/react-router-config @types/react-router-dom -S</code><pre><code>npm i react-router-dom@5.2.0 react-router-config @types/react-router-config @types/react-router-dom -S
</code></pre></li>
<li>src目录下创建views文件夹，views内创建Home，Contact，About，Navbar四个tsx文件，其中Navbar用来控制路由，其他三个页面用来展示</li>
</ol>
<p><img src="https://img.tvv.tw/2022/03/17/9323f0738f88f.png" alt="创建tsx文件"></p>
<ul>
<li>Home:<br>```<br>import React, &#123; Component &#125; from “react”;</li>
</ul>
<p>export default class Home extends Component &#123;<br>  render() &#123;<br>    return (<br>      <div classname="home">
        <div classname="container">
          <h3 classname="center"> Home页面</h3>
          <p>欢迎来到首页</p>
        </div><br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;</div></p>
<pre><code>- Contact:
</code></pre><p>import React, &#123; Component &#125; from “react”;</p>
<p>export default class Contact extends Component &#123;<br>  render() &#123;<br>    return (<br>      <div classname="contact">
        <div classname="container">
          <h3 classname="center"> Contact页面</h3>
          <p>欢迎来到联系我们页面！</p>
        </div><br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;</div></p>
<pre><code>- About:
</code></pre><p>import React, &#123; Component &#125; from “react”;</p>
<p>export default class About extends Component &#123;<br>  render() &#123;<br>    return (<br>      <div classname="about">
        <div classname="container">
          <h3 classname="center"> About页面</h3>
          <p>欢迎来到关于我们页面！</p>
        </div><br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;</div></p>
<pre><code>- Navbar:
</code></pre><p>import React, &#123; Component &#125; from “react”;</p>
<p>export default class Navbar extends Component &#123;<br>    render() &#123;<br>        return (<br>            <nav classname="nav-wrapper">
                <div classname="list">
                    <ul>
                        <li><a href="/">Home</a></li>
                        <li><a href="/about">About</a></li>
                        <li><a href="/contact">Contact</a></li>
                    </ul>
                </div>
            </nav><br>        )<br>    &#125;<br>&#125;</p>
<pre><code>
3. src目录下创建routes文件夹，同时创建index.ts，使用RouteConfig对路由进行统一管理

![routes文件夹](https://img.tvv.tw/2022/03/17/de44ce6f8e9c3.png)

- index.ts:
</code></pre><p>// 导入路由组件<br>import Home from ‘../views/Home’<br>import About from ‘../views/About’<br>import Contact from ‘../views/Contact’<br>// 导入路由管理工具<br>import &#123;RouteConfig&#125; from ‘react-router-config’</p>
<p>const routes:RouteConfig = [<br>  &#123;<br>    path:’/‘,<br>    exact:true,<br>    component:Home<br>  &#125;,<br>  &#123;<br>    path:’/about’,<br>    exact:true,<br>    component:About<br>  &#125;,<br>  &#123;<br>    path:’/contact’,<br>    exact:true,<br>    component:Contact<br>  &#125;<br>]</p>
<p>export default routes;</p>
<pre><code>
4. App.tsx中引入Route，Navbar和路由管理工具
</code></pre><p>import React from “react”;<br>// 引入路由导航栏<br>import Navbar from “./views/Navbar”;<br>// 引入routes组件<br>import routes from “./routes”;<br>// 引入包管理工具<br>import &#123; renderRoutes, RouteConfig &#125; from “react-router-config”;<br>import “./App.css”;</p>
<p>function App() &#123;<br>  return (<br>    <div classname="App"><br>      <Navbar></Navbar></div></p>
<pre><code>  &amp;#123;/* 设置routes的类型为RouteConfig[]，否则报错 */&amp;#125;
  &amp;#123;renderRoutes(routes as RouteConfig[])&amp;#125;
&lt;/div&gt;
</code></pre><p>  );<br>&#125;</p>
<p>export default App;</p>
<pre><code>
![App.tsx配置](https://img.tvv.tw/2022/03/17/41bba88e8f1e5.png)

5. src根目录下index.tsx中这样定义

![index.tsx](https://img.tvv.tw/2022/03/17/b148bab3bc4d3.png)
</code></pre><p>import React from “react”;<br>import ReactDOM from “react-dom”;<br>import “./index.css”;<br>import App from “./App”;<br>import reportWebVitals from “./reportWebVitals”;<br>import &#123; BrowserRouter as Router &#125; from “react-router-dom”;</p>
<p>ReactDOM.render(<br>  <React.StrictMode><br>    <Router><br>      <App>
    </App></Router><br>  &lt;/React.StrictMode&gt;,<br>  document.getElementById(“root”)<br>);</React.StrictMode></p>
<p>reportWebVitals();</p>
<pre><code>
6. 路由就配置好了，&lt;code&gt;npm start&lt;/code&gt;启动项目
- 启动项目若以下报错：

![报错](https://img.tvv.tw/2022/03/17/0943c97260023.png)

- 运行命令：&lt;code&gt;npm i react-router@5.2.0 -S&lt;/code&gt;
</code></pre><p>npm i react-router@5.2.0 -S</p>
<pre><code>- 输入&lt;code&gt;npm start&lt;/code&gt;再次打开页面应该是这样：

![页面](https://img.tvv.tw/2022/03/17/8f7c8c4900cfe.png)

- 在App.css中加点样式

![App.css](https://img.tvv.tw/2022/03/17/358cb93ad3db0.png)
</code></pre><ul>
<li>&#123;<br>padding: 0;<br>margin: 0;<br>&#125;</li>
</ul>
<p>.container&#123;<br>  text-align: center;<br>&#125;</p>
<p>h1 &#123;<br>  text-align: center;<br>  font-size: 45px;<br>  font-family: Arial, Helvetica, sans-serif;<br>  color: rgb(6, 0, 32);<br>  padding: 40px;<br>&#125;</p>
<p>.list &#123;<br>  display: flex;<br>  justify-content: center;<br>  width: 100%;<br>&#125;</p>
<p>.list ul li &#123;<br>  float: left;<br>  list-style: none;<br>  margin: 42px;<br>  text-align: center;<br>&#125;</p>
<p>a &#123;<br>  text-decoration: none;<br>  color: rgb(0, 0, 0);<br>  font-size: 18px;<br>  font-family: Arial, Helvetica, sans-serif;<br>  padding: 14px 25px;<br>  background-color: transparent;<br>  border: 2px solid rgb(12, 0, 66);<br>&#125;</p>
<p>a:hover &#123;<br>  background-color: rgb(12, 0, 66);<br>  color: rgb(255, 255, 255);<br>&#125;</p>
<pre><code>
![新页面](https://img.tvv.tw/2022/03/17/5e667906f887d.png)

### 配置less
1. 暴露配置方式：运行命令：&lt;code&gt;npm run eject&lt;/code&gt;
</code></pre><p>npm run eject</p>
<pre><code>- 这里可能会遇到以下报错

![报错](https://img.tvv.tw/2022/03/17/fce5b9887addc.png)

- 依次输入以下三条命令：
</code></pre><p>git add .</p>
<pre><code>```
git commit -m &#39;暴露&#39;
</code></pre><pre><code>npm run eject
</code></pre><ul>
<li>此时项目多出了config文件夹</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/7218188254430.png" alt="config"></p>
<ol>
<li>安装less和less-loader命令：<code>npm i less less-loader -S</code><pre><code>npm i less less-loader -S
</code></pre></li>
<li>找到config目录下的webpack.config.js文件，在50-76行之间有个cssRegex，在此处添加</li>
</ol>
<p><img src="https://img.tvv.tw/2022/03/17/a9a73d98d521f.png" alt="添加"></p>
<pre><code>// less
const lessRegex = /\.less$/;
const lessModuleRegex = /\.module\.less$/;
</code></pre><ol>
<li>在webpack.config.js文件500多行有个sassRegex，模仿添加对应的lessRegex</li>
</ol>
<p><img src="https://img.tvv.tw/2022/03/17/7662bcfb264a2.png" alt="less"></p>
<pre><code>// less
            &amp;#123;
              test: lessRegex,
              exclude: lessModuleRegex,
              use: getStyleLoaders(
                &amp;#123;
                  importLoaders: 2,
                  sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,
                &amp;#125;,
                &#39;less-loader&#39;
              ),
              sideEffects: true,
            &amp;#125;,
            // less
            &amp;#123;
              test: lessModuleRegex,
              use: getStyleLoaders(
                &amp;#123;
                  importLoaders: 2,
                  sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,
                  modules: true,
                  getLocalIdent: getCSSModuleLocalIdent,
                &amp;#125;,
                &#39;less-loader&#39;
              ),
            &amp;#125;,
</code></pre><ol>
<li><strong>重新</strong>启动项目<code>npm start</code>，创建less文件并引入</li>
</ol>
<ul>
<li>创建：</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/17bb88cdd00e2.png" alt="less"></p>
<pre><code>.about&amp;#123;
    .container&amp;#123;
        font-size: 30px;
        p&amp;#123;
            color: red;
        &amp;#125;
    &amp;#125;
    .box&amp;#123;
        text-align: center;
    &amp;#125;
&amp;#125;
</code></pre><ul>
<li>引入：</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/a3f82090fdec2.png" alt="引入"></p>
<pre><code>import &#39;about.less&#39;
</code></pre><ul>
<li>打开应该是这样的</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/80f85160dd215.png" alt="about页面"></p>
<p>说明less配置成功了</p>
<h3 id="配置sass（可选配）"><a href="#配置sass（可选配）" class="headerlink" title="配置sass（可选配）"></a>配置sass（可选配）</h3><ul>
<li>通过create-react-app创建的react项目，其实是默认已经配置好sass的 可以直接使用</li>
<li>可能会报以下错：</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/8893ab84f16c7.png" alt="报错"></p>
<ul>
<li>运行以下命令：<pre><code>npm i sass -s
</code></pre></li>
</ul>
<p>重新启动项目<code>npm start</code>，样式即可生效</p>
<h3 id="配置px转rem自适应"><a href="#配置px转rem自适应" class="headerlink" title="配置px转rem自适应"></a>配置px转rem自适应</h3><ol>
<li><p>安装lib-flexible、pxtorem，postcss命令：</p>
<pre><code>npm i lib-flexible postcss-pxtorem postcss postcss-loader postcss-preset-env postcss-flexbugs-fixes -s
</code></pre></li>
<li><p>配置config/webpack.config.js，在config目录下找到webpack.config.js文件，添加</p>
</li>
</ol>
<p><img src="https://img.tvv.tw/2022/03/17/8b4e4cfdf4b8d.png" alt="rem"></p>
<pre><code>const px2rem = require(&#39;postcss-pxtorem&#39;);
</code></pre><ol>
<li>然后再加入下面这行loader直接覆盖：</li>
</ol>
<p><img src="https://img.tvv.tw/2022/03/17/0ab02dc71e584.png" alt="loader"></p>
<pre><code>      &amp;#123;
        // Options for PostCSS as we reference these options twice
        // Adds vendor prefixing based on your specified browser support in
        // package.json
        loader: require.resolve(&#39;postcss-loader&#39;),
        options: &amp;#123;
          postcssOptions: &amp;#123;
            // Necessary for external CSS imports to work
            // https://github.com/facebook/create-react-app/issues/2677
            ident: &#39;postcss&#39;,
            config: false,
            plugins: !useTailwind
              ? [
                  &#39;postcss-nested&#39;,
                  &#39;postcss-flexbugs-fixes&#39;,
                  [
                    &#39;postcss-preset-env&#39;,
                    &amp;#123;
                      autoprefixer: &amp;#123;
                        flexbox: &#39;no-2009&#39;,
                      &amp;#125;,
                      stage: 3
                    &amp;#125;,
                  ],
                  // Adds PostCSS Normalize as the reset css with default options,
                  // so that it honors browserslist config in package.json
                  // which in turn let&#39;s users customize the target behavior as per their needs.
                  px2rem(&amp;#123;
                    rootValue: 37.5,
                    selectorBlackList  : [], //过滤
                    propList   : [&#39;*&#39;],
                    minPixelValue: 2,
                    exclude: /node_modules/i
                  &amp;#125;), //设计稿根据750px(iphone6)
                &#39;postcss-normalize&#39;,
                ]
              : [
                  &#39;tailwindcss&#39;,
                  &#39;postcss-flexbugs-fixes&#39;,
                  [
                    &#39;postcss-preset-env&#39;,
                    &amp;#123;
                      autoprefixer: &amp;#123;
                        flexbox: &#39;no-2009&#39;,
                      &amp;#125;,
                      stage: 3,
                    &amp;#125;,
                  ],
                  px2rem(&amp;#123;
                    rootValue: 37.5,
                    selectorBlackList  : [], //过滤
                    propList   : [&#39;*&#39;],
                    minPixelValue: 2,
                    exclude: /node_modules/i
                    &amp;#125;), //设计稿根据750px(iphone6)
                ],
          &amp;#125;,
          sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,
        &amp;#125;,
      &amp;#125;,
</code></pre><ol>
<li>src目录下找到index.tsx入口文件，在文件中加入</li>
</ol>
<pre><code>import &#39;lib-flexible&#39;;
</code></pre><ol>
<li>找到public/index.html文件，替换如下代码：</li>
</ol>
<p><img src="https://img.tvv.tw/2022/03/17/d48f2d4e7b77d.png" alt="替换"></p>
<pre><code>&lt;meta content=&quot;width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot; name=&quot;viewport&quot;/&gt;
</code></pre><ol>
<li>重新运行项目<code>npm start</code></li>
</ol>
<p><img src="https://img.tvv.tw/2022/03/17/051050ea5745e.png" alt="成功"></p>
<ul>
<li>看到这个说明运行配置了</li>
</ul>
<h3 id="配置axios和反向代理"><a href="#配置axios和反向代理" class="headerlink" title="配置axios和反向代理"></a>配置axios和反向代理</h3><ol>
<li>安装axios 和 http-proxy-middleware（后面反向代理会用到）：</li>
</ol>
<pre><code>npm i axios http-proxy-middleware -S
</code></pre><ol>
<li>在src目录下创建api文件夹，然后创建 index.ts 和 request.ts 文件</li>
</ol>
<p><img src="https://img.tvv.tw/2022/03/17/7f7c9a1318c3d.png" alt="api"></p>
<ul>
<li>index:<br>```<br>//index.ts</li>
</ul>
<p>import &#123;Service&#125; from ‘./request’;<br>//获取汽车列表<br>export function getCarList(config: &#123; page: string; &#125;)&#123;<br>    const params = new URLSearchParams()<br>    params.append(‘page’,config.page);</p>
<pre><code>return Service(&amp;#123;
    url:&#39;./api/getCarList&#39;,
    data:params
&amp;#125;)
</code></pre><p>&#125;</p>
<pre><code>- request:
</code></pre><p>//request.ts</p>
<p>import axios from “axios”;</p>
<p>declare module ‘axios’ &#123;<br>     export interface AxiosResponse<T = any> extends Promise<T> &#123;&#125;<br> &#125;</T></T></p>
<p>export const Service = axios.create(&#123;<br>  timeout: 3000, //延迟时间<br>  method: “POST”,<br>  headers: &#123;<br>    “pc-token”: “4a82b23dbbf3b23fd8aa291076e660ec”,<br>    “content-Type”: “application/x-www-form-urlencoded”,<br>  &#125;,<br>&#125;);</p>
<p>//请求拦截<br>Service.interceptors.request.use((config) =&gt; config);</p>
<p>//响应拦截<br>Service.interceptors.response.use(<br>  (response) =&gt; response.data,<br>  (err) =&gt; console.log(err)<br>);</p>
<pre><code>
3. 配置代理，可以访问到后台的服务器地址
4. 在src文件夹中创建setupProxy.js,内容配置如下

![setuoProxy.js](https://static01.imgkr.com/temp/50d024c501b74b2bb7ccd93a0d0f6900.png)

5. 到这里所有配置就基本完成，在组件中调用即可
- Contact.tsx:
</code></pre><p>import React, &#123; Component &#125; from “react”;<br>import “./contact.scss”;<br>//导入要使用的接口<br>import &#123; getCarList &#125; from “../api/index”;</p>
<p>export default class Contact extends Component &#123;<br>  // 定义方法<br>  getList() &#123;<br>    getCarList(&#123; page: “1” &#125;).then((res) =&gt; console.log(res));<br>  &#125;<br>  render() &#123;<br>    return (<br>      <div classname="contact">
        <div classname="container">
          <h3 classname="center"> Contact页面</h3>
          <p>欢迎来到联系我们页面！</p>
          &#123;/* 点击事件调用 */&#125;
          <button onclick="&#123;this.getList&#125;">获取数据</button>
        </div><br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;</div></p>
<pre><code>
### 配置redux
1. 安装redux
</code></pre><p>npm i redux react-redux -S</p>
<pre><code>
2. 在src路径下创建store文件夹，文件夹中创建两个文件action.ts和index.ts两个文件
3. action中定义type，然后返回设置状态的type和函数

![action](https://img.tvv.tw/2022/03/17/a0918c8902d0c.png)

- action.ts:
</code></pre><p>export const SET_AGE = “set_age”;<br>export const SET_NAME = “set_name”;</p>
<p>export const setAge = function (n: number) &#123;<br>  return &#123;<br>    type: SET_AGE,<br>    n: n,<br>  &#125;;<br>&#125;;<br>export const setName = function (name: string) &#123;<br>  return &#123;<br>    type: SET_NAME,<br>    name: name,<br>  &#125;;<br>&#125;;</p>
<pre><code>4. index文件中取出redux中的createStore，以及action中的type，最后需要将createStore返回出去，并且需要传递一个函数，定义这个函数时有两个参数，一个是状态，一个是action，使用switch判断action中的type，当所有条件都不成立时，将所有的状态返回，有条件成立时，就通过扩展运算符将state展开，并且对age进行操作（...state）；

- index.ts:
</code></pre><p>import &#123; createStore &#125; from “redux”;<br>import &#123; SET_AGE, SET_NAME &#125; from “./action”;</p>
<p>interface User &#123;<br>  name: string;<br>  age: number;<br>&#125;</p>
<p>const common: User = &#123;<br>  name: “张三123”,<br>  age: 18,<br>&#125;;</p>
<p>function user(state = common, action: any) &#123;<br>  switch (action.type) &#123;<br>    case SET_AGE:<br>      return &#123;<br>        …state,<br>        age: state.age + action.n,<br>      &#125;;<br>    case SET_NAME:<br>      return &#123;<br>        …state,<br>        name: action.name,<br>      &#125;;<br>    default:<br>      return state;<br>  &#125;<br>&#125;</p>
<p>export default createStore(user);</p>
<pre><code>
5. 在主入口文件index.tsx中进行redux的连接和store的引用
</code></pre><p>import React from “react”;<br>import ReactDOM from “react-dom”;<br>import “./index.css”;<br>import App from “./App”;<br>import reportWebVitals from “./reportWebVitals”;<br>// 引入路由组件<br>import &#123; BrowserRouter as Router &#125; from “react-router-dom”;<br>// 引入移动端自适应<br>import “lib-flexible”;<br>//引入rootReducer组件<br>import &#123; Provider &#125; from “react-redux”;<br>import store from “./store”;</p>
<p>ReactDOM.render(<br>  <React.StrictMode><br>    &#123;/<em> provider组件将所有的组件包裹起来，用绑定属性的形式绑定store到组件中 </em>/&#125;<br>    <Provider store="&#123;store&#125;"><br>      <Router><br>        <App>
      </App></Router>
    </Provider><br>  &lt;/React.StrictMode&gt;,<br>  document.getElementById(“root”)<br>);</React.StrictMode></p>
<p>reportWebVitals();</p>
<pre><code>
6. 在App.tsx中进行配置
</code></pre><p>import React from “react”;<br>// 引入路由导航栏<br>import Navbar from “./views/Navbar”;<br>// 引入routes组件<br>import routes from “./routes”;<br>// 引入包管理工具<br>import &#123; renderRoutes, RouteConfig &#125; from “react-router-config”;<br>import “./App.css”;<br>// 引入connect连接组件<br>import &#123;connect&#125; from “react-redux”</p>
<p>function App() &#123;<br>  return (<br>    <div classname="App">
      <Navbar>
      &#123;/* 设置routes的类型为RouteConfig[]，否则报错 */&#125;
      &#123;renderRoutes(routes as RouteConfig[])&#125;
    </Navbar></div><br>  );<br>&#125;</p>
<p>//进行连接<br>export default connect((props,state)=&gt;Object.assign(&#123;&#125;,props,state),&#123;&#125;)(App);</p>
<pre><code>
7. 组件中使用redux
- 引入connect和action中的方法

- 定义props和state类型

- 修改render中的html结构，定义属性和方法调用

- connect连接属性并导出

- About.tsx:
</code></pre><p>import React, &#123; Component &#125; from “react”;<br>import “./about.less”;<br>// redux<br>import &#123; connect &#125; from “react-redux”;<br>import &#123; setName, setAge &#125; from “../store/action”;</p>
<p>interface Props &#123;<br>  setAge: Function;<br>  setName: Function;<br>  age: number;<br>  name: string;<br>&#125;</p>
<p>interface State &#123;&#125;</p>
<p>class About extends Component<Props,State> &#123;<br>  refs:any = React.createRef()<br>  // eslint-disable-next-line @typescript-eslint/no-useless-constructor<br>  constructor(props:Props)&#123;<br>    super(props)<br>  &#125;<br>  changeAge()&#123;<br>    this.props.setAge(1);<br>    console.log(this.props);<br>  &#125;<br>  changeName()&#123;<br>    let name:number = this.refs.value<br>    this.props.setName(name)<br>    console.log(this.refs);<br>    this.refs.value = ‘’<br>  &#125;<br>  render() &#123;<br>    return (<br>      <div classname="about">
        <div classname="container">
          <h3 classname="center"> About页面</h3>
          <p>欢迎来到关于我们页面！</p>
        </div><br>        <div classname="box">
          <p>名字是：&#123;this.props.name&#125;</p>
          <input ref="&#123;(input:" htmlinputelement)> this.refs = input&#125;  type="text" /> 
          <button onclick="&#123;this.changeName.bind(this)&#125;">修改姓名</button>
          <p>年龄是：&#123;this.props.age&#125;</p> 
          <button onclick="&#123;this.changeAge.bind(this)&#125;">修改年龄</button>
        </div><br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;</div></Props,State></p>
<p>export default connect((props,state)=&gt;Object.assign(&#123;&#125;,props,state),&#123;<br>  setAge,setName<br>&#125;)(About);</p>
<pre><code>
实现这样的效果就成功了

![效果](https://img.tvv.tw/2022/03/17/653ea5422d238.png)

### 配置别名@

1. 打开 config 文件夹下的 webpack.config.js 文件

2. ctrl + f 搜索alias，替换这个alias，代码如下：
</code></pre><p>alias: &#123;<br>        // Support React Native Web<br>        // <a href="https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/">https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/</a><br>        ‘react-native’: ‘react-native-web’,<br>        // Allows for better profiling with ReactDevTools<br>        …(isEnvProductionProfile &amp;&amp; &#123;<br>          ‘react-dom$’: ‘react-dom/profiling’,<br>          ‘scheduler/tracing’: ‘scheduler/tracing-profiling’,<br>        &#125;),<br>        …(modules.webpackAliases || &#123;&#125;),<br>        // 文件路径别名<br>        ‘@’: path.resolve(<strong>dirname, ‘../src’),<br>        ‘@view’: path.resolve(</strong>dirname, ‘../src/view’),<br>      &#125;,</p>
<pre><code>
需要特别注意的是： webpack配置进行改动后，都需要**重新**启动项目，不然不生效

### 配置antd-mobile

1. 安装antd-mobile
</code></pre><p>npm install antd-mobile</p>
<pre><code>
2. 在项目中Home.tsx文件中导入要使用的组件
- Home.tsx:
</code></pre><p>import React, &#123; Component &#125; from “react”;<br>//使用组件直接在组件中进行使用即可<br>import &#123; Button &#125; from ‘antd-mobile’;</p>
<p>export default class Home extends Component &#123;<br>  render() &#123;<br>    return (<br>      <div classname="home">
        <div classname="container">
          <h3 classname="center"> Home页面</h3>
          <p>欢迎来到首页</p>
          <Button color="primary">按钮</Button>
        </div><br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;<br>```</div></p>
<p>完成之后，你就能在react项目使用antd-mobile的样式文件进行构建自己的页面了</p>
<h3 id="有问题下面评论区及时沟通"><a href="#有问题下面评论区及时沟通" class="headerlink" title="有问题下面评论区及时沟通"></a>有问题下面评论区及时沟通</h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>这是技术文章模板</title>
    <url>/posts/articletemplate.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言，技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言。</div>

<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul>
<li>项目1</li>
<li>项目2</li>
<li>项目3</li>
</ul>
<p>正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文</p>
<p><img src="/posts/articletemplate.htm/图片url" alt="图片介绍"></p>
<p><code>正文一些需要高亮色的文字</code></p>
<p><a href="链接地址" class="LinkCard" target="_blank">引入链接</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>这是随笔文章模板</title>
    <url>/posts/essay-demo.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="这是博主的随笔板块，后续会更新文章，目前弄好了模板格式"><a href="#这是博主的随笔板块，后续会更新文章，目前弄好了模板格式" class="headerlink" title="这是博主的随笔板块，后续会更新文章，目前弄好了模板格式~"></a>这是博主的随笔板块，后续会更新文章，目前弄好了模板格式~</h4><div class="ipage">
    <div class="ititle">节选自《你若安好便是晴天》- 前言</div>
  <div class="izhengwen">
  <p>几场梅雨，几卷荷风，江南已是烟水迷离。小院里湿润的青苔在雨中纯净生长。这个季节，许多人都在打听关于莲荷的消息，以及茉莉在黄昏浮动的神秘幽香。不知多少人会记得有个女子，曾经走过人间四月天，又与莲开的夏季有过相濡以沫的约定。</p>

  <p>一个人，一本书，一杯茶，一帘梦。有时候，寂寞是这样叫人心动，也只有此刻，世事才会如此波澜不惊。凉风吹起书页，这烟雨让尘封在书卷里的词章和故事弥漫着潮湿的气息。独倚幽窗，看转角处的青石小巷，一柄久违的油纸伞，遮住了低过屋檐的光阴。</p>

  <p>时光微凉，那一场远去的往事被春水浸泡，秋风吹拂，早已洗去铅华，清绝明净。以为历经人生匆匆聚散，尝过尘世种种烟火，应该承担岁月带给我们的沧桑。可流年分明安然无恙，而山石草木是这样毫发无伤。只是曾经许过地老天荒的城，在细雨中越发地清瘦单薄。</p>

  <p>青梅煎好的茶水，还是当年的味道；而我们等候的人，不会再来。后来才知道，那一袭素色白衣的女子已化身为燕，去寻觅水乡旧巢。她走过的地方，有一树一树的花开，她呢喃的梁间，还留着余温犹存的梦。有人说，她是个冰洁的女子，所以无论人世如何变迁，她都有着美丽的容颜。有人说，她是个理智的女子，不管面临怎样的诱惑，最后都可以全身而退。</p>

  <p>她叫林徽因，出生于杭州，是许多人梦中期待的白莲。她在雨雾之都伦敦，发生过一场空前绝后的康桥之恋。她爱过三个男子，爱得清醒，也爱得平静。徐志摩为她徜徉在康桥，深情地等待一场旧梦可以归来。梁思成与她携手走过千山万水，为完成使命而相约白头。金岳霖为她终身不娶，痴心不改地守候一世。可她懂得人生飘忽不定，要学会随遇而安。</p>

  </div>
</div>



]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
