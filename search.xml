<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>react+ts等最详细配置</title>
    <url>/posts/react_cli_ts.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">【React+TS】从零开始搭建react+typescript+router+redux+less+px2rem自适应+sass+axios反向代理+别名@+Antd-mobile</div>

<p>前提：你需要准备好node.js版本不低于6.14.8</p>
<h3 id="通过create-react-app脚手架搭建项目"><a href="#通过create-react-app脚手架搭建项目" class="headerlink" title="通过create-react-app脚手架搭建项目"></a>通过create-react-app脚手架搭建项目</h3><h4 id="1-第一步"><a href="#1-第一步" class="headerlink" title="1.第一步"></a>1.第一步</h4><ul>
<li>打开文件夹，呼出cmd，输入搭建命令：<code>npx create-react-app 项目名称 —template typescript</code></li>
</ul>
<font color="red" size="4">注: 项目名称不可以出现大写字母</font>

<pre><code>npx create-react-app test --template typescript
</code></pre><p><img src="https://img.tvv.tw/2022/03/17/8327e52a8b540.png" alt="指令"></p>
<p><img src="https://img.tvv.tw/2022/03/17/eef7adb646d67.png" alt="成功"></p>
<ul>
<li>当你出现Happy hacking说明你下载成功了，vscode打开项目，可以看到顺利生成了react项目组件，后缀为tsx此时说明成功创建了react+typescript项目的雏形</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/9e549a4c54a84.png" alt="成功"></p>
<h4 id="2-第二步"><a href="#2-第二步" class="headerlink" title="2.第二步"></a>2.第二步</h4><ul>
<li>进入项目更目录下，运行命令：<code>npm start</code>启动项目</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/f19fd1c725a60.png" alt="运行"></p>
<pre><code>npm start
</code></pre><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><h4 id="1-第一步-1"><a href="#1-第一步-1" class="headerlink" title="1.第一步"></a>1.第一步</h4><ul>
<li>npm下载路由命令：<code>npm i react-router-dom@5.2.0 react-router-config @types/react-router-config @types/react-router-dom -S</code><pre><code>npm i react-router-dom@5.2.0 react-router-config @types/react-router-config @types/react-router-dom -S
</code></pre></li>
</ul>
<h4 id="2-第二步-1"><a href="#2-第二步-1" class="headerlink" title="2.第二步"></a>2.第二步</h4><ul>
<li>src目录下创建views文件夹，views内创建Home，Contact，About，Navbar四个tsx文件，其中Navbar用来控制路由，其他三个页面用来展示</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/9323f0738f88f.png" alt="创建tsx文件"></p>
<ul>
<li>Home.tst:</li>
</ul>
<pre><code>import React, &amp;#123; Component &amp;#125; from &quot;react&quot;;

export default class Home extends Component &amp;#123;
  render() &amp;#123;
    return (
      &lt;div className=&quot;home&quot;&gt;
        &lt;div className=&quot;container&quot;&gt;
          &lt;h3 className=&quot;center&quot;&gt; Home页面&lt;/h3&gt;
          &lt;p&gt;欢迎来到首页&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  &amp;#125;
&amp;#125;
</code></pre><ul>
<li>Contact:</li>
</ul>
<pre><code>import React, &amp;#123; Component &amp;#125; from &quot;react&quot;;

export default class Contact extends Component &amp;#123;
  render() &amp;#123;
    return (
      &lt;div className=&quot;contact&quot;&gt;
        &lt;div className=&quot;container&quot;&gt;
          &lt;h3 className=&quot;center&quot;&gt; Contact页面&lt;/h3&gt;
          &lt;p&gt;欢迎来到联系我们页面！&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  &amp;#125;
&amp;#125;
</code></pre><ul>
<li>About:</li>
</ul>
<pre><code>import React, &amp;#123; Component &amp;#125; from &quot;react&quot;;

export default class About extends Component &amp;#123;
  render() &amp;#123;
    return (
      &lt;div className=&quot;about&quot;&gt;
        &lt;div className=&quot;container&quot;&gt;
          &lt;h3 className=&quot;center&quot;&gt; About页面&lt;/h3&gt;
          &lt;p&gt;欢迎来到关于我们页面！&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  &amp;#125;
&amp;#125;
</code></pre><ul>
<li>Navbar:</li>
</ul>
<pre><code>import React, &amp;#123; Component &amp;#125; from &quot;react&quot;;

export default class Navbar extends Component &amp;#123;
    render() &amp;#123;
        return (
            &lt;nav className=&quot;nav-wrapper&quot;&gt;
                &lt;div className=&quot;list&quot;&gt;
                    &lt;ul&gt;
                        &lt;li&gt;&lt;a href=&#39;/&#39;&gt;Home&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#39;/about&#39;&gt;About&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#39;/contact&#39;&gt;Contact&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
            &lt;/nav&gt;
        )
    &amp;#125;
&amp;#125;
</code></pre><h4 id="3-第三步"><a href="#3-第三步" class="headerlink" title="3.第三步"></a>3.第三步</h4><ul>
<li>src目录下创建routes文件夹，同时创建index.ts，使用RouteConfig对路由进行统一管理</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/de44ce6f8e9c3.png" alt="routes文件夹"></p>
<ul>
<li>index.ts:</li>
</ul>
<pre><code>// 导入路由组件
import Home from &#39;../views/Home&#39;
import About from &#39;../views/About&#39;
import Contact from &#39;../views/Contact&#39;
// 导入路由管理工具
import &amp;#123;RouteConfig&amp;#125; from &#39;react-router-config&#39;

const routes:RouteConfig = [
  &amp;#123;
    path:&#39;/&#39;,
    exact:true,
    component:Home
  &amp;#125;,
  &amp;#123;
    path:&#39;/about&#39;,
    exact:true,
    component:About
  &amp;#125;,
  &amp;#123;
    path:&#39;/contact&#39;,
    exact:true,
    component:Contact
  &amp;#125;
]

export default routes;
</code></pre><h4 id="4-第四步"><a href="#4-第四步" class="headerlink" title="4.第四步"></a>4.第四步</h4><ul>
<li>App.tsx中引入Route，Navbar和路由管理工具</li>
</ul>
<pre><code>import React from &quot;react&quot;;
// 引入路由导航栏
import Navbar from &quot;./views/Navbar&quot;;
// 引入routes组件
import routes from &quot;./routes&quot;;
// 引入包管理工具
import &amp;#123; renderRoutes, RouteConfig &amp;#125; from &quot;react-router-config&quot;;
import &quot;./App.css&quot;;

function App() &amp;#123;
  return (
    &lt;div className=&quot;App&quot;&gt;
      &lt;Navbar /&gt;

      &amp;#123;/* 设置routes的类型为RouteConfig[]，否则报错 */&amp;#125;
      &amp;#123;renderRoutes(routes as RouteConfig[])&amp;#125;
    &lt;/div&gt;
  );
&amp;#125;

export default App;
</code></pre><p><img src="https://img.tvv.tw/2022/03/17/41bba88e8f1e5.png" alt="App.tsx配置"></p>
<h4 id="5-第五步"><a href="#5-第五步" class="headerlink" title="5.第五步"></a>5.第五步</h4><ul>
<li>src根目录下index.tsx中这样定义</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/b148bab3bc4d3.png" alt="index.tsx"></p>
<pre><code>import React from &quot;react&quot;;
import ReactDOM from &quot;react-dom&quot;;
import &quot;./index.css&quot;;
import App from &quot;./App&quot;;
import reportWebVitals from &quot;./reportWebVitals&quot;;
import &amp;#123; BrowserRouter as Router &amp;#125; from &quot;react-router-dom&quot;;

ReactDOM.render(
  &lt;React.StrictMode&gt;
    &lt;Router&gt;
      &lt;App /&gt;
    &lt;/Router&gt;
  &lt;/React.StrictMode&gt;,
  document.getElementById(&quot;root&quot;)
);

reportWebVitals();
</code></pre><h4 id="6-第六步"><a href="#6-第六步" class="headerlink" title="6.第六步"></a>6.第六步</h4><ul>
<li><p>路由就配置好了，<code>npm start</code>启动项目</p>
</li>
<li><p>启动项目若以下报错：</p>
</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/0943c97260023.png" alt="报错"></p>
<ul>
<li>运行命令：<code>npm i react-router@5.2.0 -S</code></li>
</ul>
<pre><code>npm i react-router@5.2.0 -S
</code></pre><ul>
<li>输入<code>npm start</code>再次打开页面应该是这样：</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/8f7c8c4900cfe.png" alt="页面"></p>
<h4 id="7-第七步"><a href="#7-第七步" class="headerlink" title="7.第七步"></a>7.第七步</h4><ul>
<li>在App.css中加点样式</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/358cb93ad3db0.png" alt="App.css"></p>
<pre><code>* &amp;#123;
  padding: 0;
  margin: 0;
&amp;#125;

.container&amp;#123;
  text-align: center;
&amp;#125;

h1 &amp;#123;
  text-align: center;
  font-size: 45px;
  font-family: Arial, Helvetica, sans-serif;
  color: rgb(6, 0, 32);
  padding: 40px;
&amp;#125;

.list &amp;#123;
  display: flex;
  justify-content: center;
  width: 100%;
&amp;#125;

.list ul li &amp;#123;
  float: left;
  list-style: none;
  margin: 42px;
  text-align: center;
&amp;#125;

a &amp;#123;
  text-decoration: none;
  color: rgb(0, 0, 0);
  font-size: 18px;
  font-family: Arial, Helvetica, sans-serif;
  padding: 14px 25px;
  background-color: transparent;
  border: 2px solid rgb(12, 0, 66);
&amp;#125;

a:hover &amp;#123;
  background-color: rgb(12, 0, 66);
  color: rgb(255, 255, 255);
&amp;#125;
</code></pre><p><img src="https://img.tvv.tw/2022/03/17/5e667906f887d.png" alt="新页面"></p>
<h3 id="配置less"><a href="#配置less" class="headerlink" title="配置less"></a>配置less</h3><h4 id="1-第一步-2"><a href="#1-第一步-2" class="headerlink" title="1.第一步"></a>1.第一步</h4><ul>
<li>暴露配置方式：运行命令：<code>npm run eject</code></li>
</ul>
<pre><code>npm run eject
</code></pre><ul>
<li>这里可能会遇到以下报错</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/fce5b9887addc.png" alt="报错"></p>
<ul>
<li>依次输入以下三条命令：</li>
</ul>
<pre><code>git add .
</code></pre><pre><code>git commit -m &#39;暴露&#39;
</code></pre><pre><code>npm run eject
</code></pre><ul>
<li>此时项目多出了config文件夹</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/7218188254430.png" alt="config"></p>
<h4 id="2-第二步-2"><a href="#2-第二步-2" class="headerlink" title="2.第二步"></a>2.第二步</h4><ul>
<li>安装less和less-loader命令：<code>npm i less less-loader -S</code></li>
</ul>
<pre><code>npm i less less-loader -S
</code></pre><h4 id="3-第三步-1"><a href="#3-第三步-1" class="headerlink" title="3.第三步"></a>3.第三步</h4><ul>
<li>找到config目录下的webpack.config.js文件，在50-76行之间有个cssRegex，在此处添加</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/a9a73d98d521f.png" alt="添加"></p>
<pre><code>// less
const lessRegex = /\.less$/;
const lessModuleRegex = /\.module\.less$/;
</code></pre><h4 id="4-第四步-1"><a href="#4-第四步-1" class="headerlink" title="4.第四步"></a>4.第四步</h4><ul>
<li>在webpack.config.js文件500多行有个sassRegex，模仿添加对应的lessRegex</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/7662bcfb264a2.png" alt="less"></p>
<pre><code>// less
            &amp;#123;
              test: lessRegex,
              exclude: lessModuleRegex,
              use: getStyleLoaders(
                &amp;#123;
                  importLoaders: 2,
                  sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,
                &amp;#125;,
                &#39;less-loader&#39;
              ),
              sideEffects: true,
            &amp;#125;,
            // less
            &amp;#123;
              test: lessModuleRegex,
              use: getStyleLoaders(
                &amp;#123;
                  importLoaders: 2,
                  sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,
                  modules: true,
                  getLocalIdent: getCSSModuleLocalIdent,
                &amp;#125;,
                &#39;less-loader&#39;
              ),
            &amp;#125;,
</code></pre><h4 id="5-第五步-1"><a href="#5-第五步-1" class="headerlink" title="5.第五步"></a>5.第五步</h4><ul>
<li><p><strong>重新</strong>启动项目<code>npm start</code>，创建less文件并引入</p>
</li>
<li><p>创建：</p>
</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/17bb88cdd00e2.png" alt="less"></p>
<pre><code>.about&amp;#123;
    .container&amp;#123;
        font-size: 30px;
        p&amp;#123;
            color: red;
        &amp;#125;
    &amp;#125;
    .box&amp;#123;
        text-align: center;
    &amp;#125;
&amp;#125;
</code></pre><ul>
<li>引入：</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/a3f82090fdec2.png" alt="引入"></p>
<pre><code>import &#39;about.less&#39;
</code></pre><ul>
<li>打开应该是这样的</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/80f85160dd215.png" alt="about页面"></p>
<p>说明less配置成功了</p>
<h3 id="配置sass（可选配）"><a href="#配置sass（可选配）" class="headerlink" title="配置sass（可选配）"></a>配置sass（可选配）</h3><h4 id="1-第一步-3"><a href="#1-第一步-3" class="headerlink" title="1.第一步"></a>1.第一步</h4><ul>
<li>通过create-react-app创建的react项目，其实是默认已经配置好sass的 可以直接使用</li>
<li>可能会报以下错：</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/8893ab84f16c7.png" alt="报错"></p>
<ul>
<li>运行以下命令：</li>
</ul>
<pre><code>npm i sass -s
</code></pre><h4 id="2-第二步-3"><a href="#2-第二步-3" class="headerlink" title="2.第二步"></a>2.第二步</h4><ul>
<li>重新启动项目<code>npm start</code>，样式即可生效</li>
</ul>
<h3 id="配置px转rem自适应"><a href="#配置px转rem自适应" class="headerlink" title="配置px转rem自适应"></a>配置px转rem自适应</h3><h4 id="1-第一步-4"><a href="#1-第一步-4" class="headerlink" title="1.第一步"></a>1.第一步</h4><ul>
<li>安装lib-flexible、pxtorem，postcss命令：</li>
</ul>
<pre><code>npm i lib-flexible postcss-pxtorem postcss postcss-loader postcss-preset-env postcss-flexbugs-fixes -s
</code></pre><h4 id="2-第二步-4"><a href="#2-第二步-4" class="headerlink" title="2.第二步"></a>2.第二步</h4><ul>
<li>配置config/webpack.config.js，在config目录下找到webpack.config.js文件，添加</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/8b4e4cfdf4b8d.png" alt="rem"></p>
<pre><code>const px2rem = require(&#39;postcss-pxtorem&#39;);
</code></pre><h4 id="3-第三步-2"><a href="#3-第三步-2" class="headerlink" title="3.第三步"></a>3.第三步</h4><ul>
<li>然后再加入下面这行loader直接覆盖：</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/0ab02dc71e584.png" alt="loader"></p>
<pre><code>      &amp;#123;
        // Options for PostCSS as we reference these options twice
        // Adds vendor prefixing based on your specified browser support in
        // package.json
        loader: require.resolve(&#39;postcss-loader&#39;),
        options: &amp;#123;
          postcssOptions: &amp;#123;
            // Necessary for external CSS imports to work
            // https://github.com/facebook/create-react-app/issues/2677
            ident: &#39;postcss&#39;,
            config: false,
            plugins: !useTailwind
              ? [
                  &#39;postcss-nested&#39;,
                  &#39;postcss-flexbugs-fixes&#39;,
                  [
                    &#39;postcss-preset-env&#39;,
                    &amp;#123;
                      autoprefixer: &amp;#123;
                        flexbox: &#39;no-2009&#39;,
                      &amp;#125;,
                      stage: 3
                    &amp;#125;,
                  ],
                  // Adds PostCSS Normalize as the reset css with default options,
                  // so that it honors browserslist config in package.json
                  // which in turn let&#39;s users customize the target behavior as per their needs.
                  px2rem(&amp;#123;
                    rootValue: 37.5,
                    selectorBlackList  : [], //过滤
                    propList   : [&#39;*&#39;],
                    minPixelValue: 2,
                    exclude: /node_modules/i
                  &amp;#125;), //设计稿根据750px(iphone6)
                &#39;postcss-normalize&#39;,
                ]
              : [
                  &#39;tailwindcss&#39;,
                  &#39;postcss-flexbugs-fixes&#39;,
                  [
                    &#39;postcss-preset-env&#39;,
                    &amp;#123;
                      autoprefixer: &amp;#123;
                        flexbox: &#39;no-2009&#39;,
                      &amp;#125;,
                      stage: 3,
                    &amp;#125;,
                  ],
                  px2rem(&amp;#123;
                    rootValue: 37.5,
                    selectorBlackList  : [], //过滤
                    propList   : [&#39;*&#39;],
                    minPixelValue: 2,
                    exclude: /node_modules/i
                    &amp;#125;), //设计稿根据750px(iphone6)
                ],
          &amp;#125;,
          sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,
        &amp;#125;,
      &amp;#125;,
</code></pre><h4 id="4-第四步-2"><a href="#4-第四步-2" class="headerlink" title="4.第四步"></a>4.第四步</h4><ul>
<li>src目录下找到index.tsx入口文件，在文件中加入</li>
</ul>
<pre><code>import &#39;lib-flexible&#39;;
</code></pre><h4 id="5-第五步-2"><a href="#5-第五步-2" class="headerlink" title="5.第五步"></a>5.第五步</h4><ul>
<li>找到public/index.html文件，替换如下代码：</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/d48f2d4e7b77d.png" alt="替换"></p>
<pre><code>&lt;meta content=&quot;width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot; name=&quot;viewport&quot;/&gt;
</code></pre><h4 id="6-第六步-1"><a href="#6-第六步-1" class="headerlink" title="6.第六步"></a>6.第六步</h4><ul>
<li>重新运行项目<code>npm start</code></li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/051050ea5745e.png" alt="成功"></p>
<ul>
<li>看到这个说明运行配置了</li>
</ul>
<h3 id="配置axios和反向代理"><a href="#配置axios和反向代理" class="headerlink" title="配置axios和反向代理"></a>配置axios和反向代理</h3><h4 id="1-第一步-5"><a href="#1-第一步-5" class="headerlink" title="1.第一步"></a>1.第一步</h4><ul>
<li>安装axios 和 http-proxy-middleware（后面反向代理会用到）：</li>
</ul>
<pre><code>npm i axios http-proxy-middleware -S
</code></pre><h4 id="2-第二步-5"><a href="#2-第二步-5" class="headerlink" title="2.第二步"></a>2.第二步</h4><ul>
<li>在src目录下创建api文件夹，然后创建 index.ts 和 request.ts 文件</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/7f7c9a1318c3d.png" alt="api"></p>
<ul>
<li>index:</li>
</ul>
<pre><code>//index.ts

import &amp;#123;Service&amp;#125; from &#39;./request&#39;;
//获取汽车列表
export function getCarList(config: &amp;#123; page: string; &amp;#125;)&amp;#123;
    const params = new URLSearchParams()
    params.append(&#39;page&#39;,config.page);

    return Service(&amp;#123;
        url:&#39;./api/getCarList&#39;,
        data:params
    &amp;#125;)
&amp;#125;
</code></pre><ul>
<li>request:</li>
</ul>
<pre><code>//request.ts

import axios from &quot;axios&quot;;

declare module &#39;axios&#39; &amp;#123;
     export interface AxiosResponse&lt;T = any&gt; extends Promise&lt;T&gt; &amp;#123;&amp;#125;
 &amp;#125;

export const Service = axios.create(&amp;#123;
  timeout: 3000, //延迟时间
  method: &quot;POST&quot;,
  headers: &amp;#123;
    &quot;pc-token&quot;: &quot;4a82b23dbbf3b23fd8aa291076e660ec&quot;,
    &quot;content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,
  &amp;#125;,
&amp;#125;);

//请求拦截
Service.interceptors.request.use((config) =&gt; config);

//响应拦截
Service.interceptors.response.use(
  (response) =&gt; response.data,
  (err) =&gt; console.log(err)
);
</code></pre><h4 id="3-第三步-3"><a href="#3-第三步-3" class="headerlink" title="3.第三步"></a>3.第三步</h4><ul>
<li><p>配置代理，可以访问到后台的服务器地址</p>
</li>
<li><p>在src文件夹中创建setupProxy.js,内容配置如下</p>
</li>
</ul>
<p><img src="https://static01.imgkr.com/temp/50d024c501b74b2bb7ccd93a0d0f6900.png" alt="setuoProxy.js"></p>
<h4 id="4-第四步-3"><a href="#4-第四步-3" class="headerlink" title="4.第四步"></a>4.第四步</h4><ul>
<li><p>到这里所有配置就基本完成，在组件中调用即可</p>
</li>
<li><p>Contact.tsx:</p>
</li>
</ul>
<pre><code>import React, &amp;#123; Component &amp;#125; from &quot;react&quot;;
import &quot;./contact.scss&quot;;
//导入要使用的接口
import &amp;#123; getCarList &amp;#125; from &quot;../api/index&quot;;

export default class Contact extends Component &amp;#123;
  // 定义方法
  getList() &amp;#123;
    getCarList(&amp;#123; page: &quot;1&quot; &amp;#125;).then((res) =&gt; console.log(res));
  &amp;#125;
  render() &amp;#123;
    return (
      &lt;div className=&quot;contact&quot;&gt;
        &lt;div className=&quot;container&quot;&gt;
          &lt;h3 className=&quot;center&quot;&gt; Contact页面&lt;/h3&gt;
          &lt;p&gt;欢迎来到联系我们页面！&lt;/p&gt;
          &amp;#123;/* 点击事件调用 */&amp;#125;
          &lt;button onClick=&amp;#123;this.getList&amp;#125;&gt;获取数据&lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  &amp;#125;
&amp;#125;
</code></pre><h3 id="配置redux"><a href="#配置redux" class="headerlink" title="配置redux"></a>配置redux</h3><h4 id="1-第一步-6"><a href="#1-第一步-6" class="headerlink" title="1.第一步"></a>1.第一步</h4><ul>
<li>安装redux</li>
</ul>
<pre><code>npm i redux react-redux -S
</code></pre><h4 id="2-第二步-6"><a href="#2-第二步-6" class="headerlink" title="2.第二步"></a>2.第二步</h4><ul>
<li>在src路径下创建store文件夹，文件夹中创建两个文件action.ts和index.ts两个文件</li>
</ul>
<h4 id="3-第三步-4"><a href="#3-第三步-4" class="headerlink" title="3.第三步"></a>3.第三步</h4><ul>
<li>action中定义type，然后返回设置状态的type和函数</li>
</ul>
<p><img src="https://img.tvv.tw/2022/03/17/a0918c8902d0c.png" alt="action"></p>
<ul>
<li>action.ts:</li>
</ul>
<pre><code>export const SET_AGE = &quot;set_age&quot;;
export const SET_NAME = &quot;set_name&quot;;

export const setAge = function (n: number) &amp;#123;
  return &amp;#123;
    type: SET_AGE,
    n: n,
  &amp;#125;;
&amp;#125;;
export const setName = function (name: string) &amp;#123;
  return &amp;#123;
    type: SET_NAME,
    name: name,
  &amp;#125;;
&amp;#125;;
</code></pre><h4 id="4-第四步-4"><a href="#4-第四步-4" class="headerlink" title="4.第四步"></a>4.第四步</h4><ul>
<li><p>index文件中取出redux中的createStore，以及action中的type，最后需要将createStore返回出去，并且需要传递一个函数，定义这个函数时有两个参数，一个是状态，一个是action，使用switch判断action中的type，当所有条件都不成立时，将所有的状态返回，有条件成立时，就通过扩展运算符将state展开，并且对age进行操作（…state）；</p>
</li>
<li><p>index.ts:</p>
</li>
</ul>
<pre><code>import &amp;#123; createStore &amp;#125; from &quot;redux&quot;;
import &amp;#123; SET_AGE, SET_NAME &amp;#125; from &quot;./action&quot;;

interface User &amp;#123;
  name: string;
  age: number;
&amp;#125;

const common: User = &amp;#123;
  name: &quot;张三123&quot;,
  age: 18,
&amp;#125;;

function user(state = common, action: any) &amp;#123;
  switch (action.type) &amp;#123;
    case SET_AGE:
      return &amp;#123;
        ...state,
        age: state.age + action.n,
      &amp;#125;;
    case SET_NAME:
      return &amp;#123;
        ...state,
        name: action.name,
      &amp;#125;;
    default:
      return state;
  &amp;#125;
&amp;#125;

export default createStore(user);
</code></pre><h4 id="5-第五步-3"><a href="#5-第五步-3" class="headerlink" title="5.第五步"></a>5.第五步</h4><ul>
<li>在主入口文件index.tsx中进行redux的连接和store的引用</li>
</ul>
<pre><code>import React from &quot;react&quot;;
import ReactDOM from &quot;react-dom&quot;;
import &quot;./index.css&quot;;
import App from &quot;./App&quot;;
import reportWebVitals from &quot;./reportWebVitals&quot;;
// 引入路由组件
import &amp;#123; BrowserRouter as Router &amp;#125; from &quot;react-router-dom&quot;;
// 引入移动端自适应
import &quot;lib-flexible&quot;;
//引入rootReducer组件
import &amp;#123; Provider &amp;#125; from &quot;react-redux&quot;;
import store from &quot;./store&quot;;

ReactDOM.render(
  &lt;React.StrictMode&gt;
    &amp;#123;/* provider组件将所有的组件包裹起来，用绑定属性的形式绑定store到组件中 */&amp;#125;
    &lt;Provider store=&amp;#123;store&amp;#125;&gt;
      &lt;Router&gt;
        &lt;App /&gt;
      &lt;/Router&gt;
    &lt;/Provider&gt;
  &lt;/React.StrictMode&gt;,
  document.getElementById(&quot;root&quot;)
);

reportWebVitals();
</code></pre><h4 id="6-第六步-2"><a href="#6-第六步-2" class="headerlink" title="6.第六步"></a>6.第六步</h4><ul>
<li>在App.tsx中进行配置</li>
</ul>
<pre><code>import React from &quot;react&quot;;
// 引入路由导航栏
import Navbar from &quot;./views/Navbar&quot;;
// 引入routes组件
import routes from &quot;./routes&quot;;
// 引入包管理工具
import &amp;#123; renderRoutes, RouteConfig &amp;#125; from &quot;react-router-config&quot;;
import &quot;./App.css&quot;;
// 引入connect连接组件
import &amp;#123;connect&amp;#125; from &quot;react-redux&quot;


function App() &amp;#123;
  return (
    &lt;div className=&quot;App&quot;&gt;
      &lt;Navbar /&gt;
      &amp;#123;/* 设置routes的类型为RouteConfig[]，否则报错 */&amp;#125;
      &amp;#123;renderRoutes(routes as RouteConfig[])&amp;#125;
    &lt;/div&gt;
  );
&amp;#125;

//进行连接
export default connect((props,state)=&gt;Object.assign(&amp;#123;&amp;#125;,props,state),&amp;#123;&amp;#125;)(App);
</code></pre><h4 id="7-第七步-1"><a href="#7-第七步-1" class="headerlink" title="7.第七步"></a>7.第七步</h4><ul>
<li><p>组件中使用redux</p>
</li>
<li><p>引入connect和action中的方法</p>
</li>
<li><p>定义props和state类型</p>
</li>
<li><p>修改render中的html结构，定义属性和方法调用</p>
</li>
<li><p>connect连接属性并导出</p>
</li>
<li><p>About.tsx:</p>
</li>
</ul>
<pre><code>import React, &amp;#123; Component &amp;#125; from &quot;react&quot;;
import &quot;./about.less&quot;;
// redux
import &amp;#123; connect &amp;#125; from &quot;react-redux&quot;;
import &amp;#123; setName, setAge &amp;#125; from &quot;../store/action&quot;;

interface Props &amp;#123;
  setAge: Function;
  setName: Function;
  age: number;
  name: string;
&amp;#125;

interface State &amp;#123;&amp;#125;

class About extends Component&lt;Props,State&gt; &amp;#123;
  refs:any = React.createRef()
  // eslint-disable-next-line @typescript-eslint/no-useless-constructor
  constructor(props:Props)&amp;#123;
    super(props)
  &amp;#125;
  changeAge()&amp;#123;
    this.props.setAge(1);
    console.log(this.props);
  &amp;#125;
  changeName()&amp;#123;
    let name:number = this.refs.value
    this.props.setName(name)
    console.log(this.refs);
    this.refs.value = &#39;&#39;
  &amp;#125;
  render() &amp;#123;
    return (
      &lt;div className=&quot;about&quot;&gt;
        &lt;div className=&quot;container&quot;&gt;
          &lt;h3 className=&quot;center&quot;&gt; About页面&lt;/h3&gt;
          &lt;p&gt;欢迎来到关于我们页面！&lt;/p&gt;
        &lt;/div&gt;
        &lt;div className=&quot;box&quot;&gt;
          &lt;p&gt;名字是：&amp;#123;this.props.name&amp;#125;&lt;/p&gt;
          &lt;input ref=&amp;#123;(input: HTMLInputElement) =&gt; this.refs = input&amp;#125;  type=&quot;text&quot; /&gt; 
          &lt;button onClick=&amp;#123;this.changeName.bind(this)&amp;#125;&gt;修改姓名&lt;/button&gt;
          &lt;p&gt;年龄是：&amp;#123;this.props.age&amp;#125;&lt;/p&gt; 
          &lt;button onClick=&amp;#123;this.changeAge.bind(this)&amp;#125;&gt;修改年龄&lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  &amp;#125;
&amp;#125;

export default connect((props,state)=&gt;Object.assign(&amp;#123;&amp;#125;,props,state),&amp;#123;
  setAge,setName
&amp;#125;)(About);
</code></pre><p>实现这样的效果就成功了</p>
<p><img src="https://img.tvv.tw/2022/03/17/653ea5422d238.png" alt="效果"></p>
<h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名@"></a>配置别名@</h3><h4 id="1-第一步-7"><a href="#1-第一步-7" class="headerlink" title="1.第一步"></a>1.第一步</h4><ul>
<li><p>打开 config 文件夹下的 webpack.config.js 文件</p>
</li>
<li><p>ctrl + f 搜索alias，替换这个alias，代码如下：</p>
</li>
</ul>
<pre><code>alias: &amp;#123;
        // Support React Native Web
        // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/
        &#39;react-native&#39;: &#39;react-native-web&#39;,
        // Allows for better profiling with ReactDevTools
        ...(isEnvProductionProfile &amp;&amp; &amp;#123;
          &#39;react-dom$&#39;: &#39;react-dom/profiling&#39;,
          &#39;scheduler/tracing&#39;: &#39;scheduler/tracing-profiling&#39;,
        &amp;#125;),
        ...(modules.webpackAliases || &amp;#123;&amp;#125;),
        // 文件路径别名
        &#39;@&#39;: path.resolve(__dirname, &#39;../src&#39;),
        &#39;@view&#39;: path.resolve(__dirname, &#39;../src/view&#39;),
      &amp;#125;,
</code></pre><h4 id="2-第二步-7"><a href="#2-第二步-7" class="headerlink" title="2.第二步"></a>2.第二步</h4><ul>
<li>需要特别注意的是： webpack配置进行改动后，都需要<strong>重新</strong>启动项目，不然不生效</li>
</ul>
<h3 id="配置antd-mobile"><a href="#配置antd-mobile" class="headerlink" title="配置antd-mobile"></a>配置antd-mobile</h3><h4 id="1-第一步-8"><a href="#1-第一步-8" class="headerlink" title="1.第一步"></a>1.第一步</h4><ul>
<li>安装antd-mobile</li>
</ul>
<pre><code>npm install antd-mobile
</code></pre><h4 id="2-第二步-8"><a href="#2-第二步-8" class="headerlink" title="2.第二步"></a>2.第二步</h4><ul>
<li><p>在项目中Home.tsx文件中导入要使用的组件</p>
</li>
<li><p>Home.tsx:</p>
</li>
</ul>
<pre><code>import React, &amp;#123; Component &amp;#125; from &quot;react&quot;;
//使用组件直接在组件中进行使用即可
import &amp;#123; Button &amp;#125; from &#39;antd-mobile&#39;;

export default class Home extends Component &amp;#123;
  render() &amp;#123;
    return (
      &lt;div className=&quot;home&quot;&gt;
        &lt;div className=&quot;container&quot;&gt;
          &lt;h3 className=&quot;center&quot;&gt; Home页面&lt;/h3&gt;
          &lt;p&gt;欢迎来到首页&lt;/p&gt;
          &lt;Button color=&#39;primary&#39;&gt;按钮&lt;/Button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  &amp;#125;
&amp;#125;
</code></pre><p>完成之后，你就能在react项目使用antd-mobile的样式文件进行构建自己的页面了</p>
<h3 id="有问题下面评论区及时沟通"><a href="#有问题下面评论区及时沟通" class="headerlink" title="有问题下面评论区及时沟通"></a>有问题下面评论区及时沟通</h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>关于itsNeko开源博客食用方法</title>
    <url>/posts/itsneko-opensource-blog.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：本文是关于itsNeko开源博客食用方法详解，感谢使用本开源博客。时间过的好快，还好我都记录下来了。</div>

<h3 id="itsNeko开源介绍"><a href="#itsNeko开源介绍" class="headerlink" title="itsNeko开源介绍"></a>itsNeko开源介绍</h3><ul>
<li>基于<br>itsNeko开源博客是基于Hexo博客Matery主题魔改，感谢各位对本博客的喜爱与支持。</li>
<li>作者<br>Hello，itsNeko，我是本博客的作者，itsNeko博主博客: <a href="https://dyfa.top/" target="_blank">itsNeko博客~</a></li>
<li>赞赏<br>如果你觉得本开源博客还可以，欢迎大家的赞赏，赞赏二维码见页面：<a href="https://dyfa.top/donate/" target="_blank">赞赏itsNeko开源博主~</a></li>
<li>提示<br>本博客为纯静态，无数据库，文章使用markdown格式，图片存在json里面，整体打包上传至服务器即可。</li>
<li>建议<br>最好懂一点编程知识，建议使用VsCode，善于使用<code>“ ctrl+F ”</code>快捷键定位然后修改自定义内容。</li>
</ul>
<h3 id="源码下载及命令"><a href="#源码下载及命令" class="headerlink" title="源码下载及命令"></a>源码下载及命令</h3><ul>
<li>本开源博客源码已公开在在博主的GitHub仓库，国内也可使用Gitee，希望得到各位的<code>小星星，Star</code>。</li>
<li>GitHub仓库：<a href="https://github.com/nekodeng/hexo-theme-itsneko.git" target="_blank">itsNeko开源博客源码GitHub地址</a></li>
<li><p>Gitee仓库：<a href="https://gitee.com/nekodeng/hexo-theme-itsneko.git" target="_blank">itsNeko开源博客源码Gitee地址</a></p>
</li>
<li><p>首先，新建一个文件夹名为“ <code>nekoblog</code> ”，在该文件夹下打开git bash，执行命令行</p>
</li>
</ul>
<pre><code>git clone https://github.com/nekodeng/hexo-theme-itsneko.git

或者使用国内的gitee

git clone https://gitee.com/nekodeng/hexo-theme-itsneko.git
</code></pre><ul>
<li>将下载的整个文件夹在VsCode中打开，在终端中依次执行以下命令行</li>
</ul>
<pre><code>npm install
hexo clean
hexo g
hexo s
</code></pre><ul>
<li>然后在浏览器中，打开“ <a href="http://localhost:4000/">http://localhost:4000/</a> ”，即可实时预览网站，再依次修改网站内容。</li>
</ul>
<p>注意：依次执行完上述4条命令后，若遇到报错极大概率是npm install的问题，也可能是网络问题，建议删除整个“ node_modules ”文件夹，然后重新执行上述命令行。</p>
<h3 id="各页面配置详解"><a href="#各页面配置详解" class="headerlink" title="各页面配置详解"></a>各页面配置详解</h3><h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><h5 id="1、网站标题描述等"><a href="#1、网站标题描述等" class="headerlink" title="1、网站标题描述等"></a>1、网站标题描述等</h5><p>在<code>/nekoblog/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ Site ”</code>，然后自行修改内容。</p>
<h5 id="2、logo图片与logo字体"><a href="#2、logo图片与logo字体" class="headerlink" title="2、logo图片与logo字体"></a>2、logo图片与logo字体</h5><ul>
<li>logo图片:<br>在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 配置网站favicon和网站LOGO ”</code>，然后自行修改图片并注意图片格式（此处建议图片大小为180*116最佳）。</li>
<li>logo字体:<br>在<code>/themes/layout/_partial/header.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ itsNeko-openSource-Blog ”</code>，然后自行修改大屏幕和小屏幕下logo字体（此处建议小屏下字体数目不宜过多）。 </li>
</ul>
<h5 id="3、banner图上打字效果字体"><a href="#3、banner图上打字效果字体" class="headerlink" title="3、banner图上打字效果字体"></a>3、banner图上打字效果字体</h5><p>在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ sub1 ”</code>，然后自行修改。</p>
<h5 id="4、《质数的孤独》内容部分"><a href="#4、《质数的孤独》内容部分" class="headerlink" title="4、《质数的孤独》内容部分"></a>4、《质数的孤独》内容部分</h5><p>在<code>/themes/layout/_widget/dream.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 《质数的孤独》 ”</code>，然后自行修改标题和内容。</p>
<h5 id="5、公告栏作者等内容部分"><a href="#5、公告栏作者等内容部分" class="headerlink" title="5、公告栏作者等内容部分"></a>5、公告栏作者等内容部分</h5><p>在<code>/themes/layout/index.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 公告文字栏开始 ”</code>，然后自行修改内容。</p>
<h5 id="6、footer内容部分"><a href="#6、footer内容部分" class="headerlink" title="6、footer内容部分"></a>6、footer内容部分</h5><p>在<code>/themes/layout/_partial/footer.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 版权信息 ”</code>，然后自行修改各类内容；此处还要在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ socialLink ”</code>，然后自行修改。</p>
<h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><h5 id="1、配置个人信息"><a href="#1、配置个人信息" class="headerlink" title="1、配置个人信息"></a>1、配置个人信息</h5><p>在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ profile ”</code>，然后自行修改头像、职业和个人介绍。</p>
<h5 id="2、个人介绍内容"><a href="#2、个人介绍内容" class="headerlink" title="2、个人介绍内容"></a>2、个人介绍内容</h5><p>在<code>/themes/layout/about.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 关于我哦 ”</code>，然后自行个人介绍介绍。</p>
<h4 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h4><h5 id="1、页面介绍"><a href="#1、页面介绍" class="headerlink" title="1、页面介绍"></a>1、页面介绍</h5><p>在<code>/themes/layout/galley.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ itsNeko开源博客相册 ”</code>，然后自行修改此内容。</p>
<h5 id="2、相册数据"><a href="#2、相册数据" class="headerlink" title="2、相册数据"></a>2、相册数据</h5><p>相册是存在json里面的，在<code>/nekoblog/source/_data/galley.json</code>文件中。一个相册就是在一个{}对象内的json数据。</p>
<h5 id="3、新建一个相册流程"><a href="#3、新建一个相册流程" class="headerlink" title="3、新建一个相册流程"></a>3、新建一个相册流程</h5><ul>
<li>首先，找到<code>/nekoblog/source/galley</code>文件夹。</li>
<li>复制已存在的“ itsNeko博主的绘画作品 ”文件夹，并取名。</li>
<li>打开新取名文件夹下的index.md文件，然后修改title字段必须与新取名文件夹名称相同，否则运行报错。</li>
<li>然后，在<code>/nekoblog/source/_data/galley.json</code>文件中，复制已存在的{}对象内的json数据，与第一段并以逗号区隔，然后修改新相册的各类内容。并注意：<code>name，url_name，album内的title这三个字段内容必须与新取名文件夹名称相同，否则运行报错。</code></li>
</ul>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="增加友情链接"><a href="#增加友情链接" class="headerlink" title="增加友情链接"></a>增加友情链接</h5><ul>
<li>友链信息是存储在<code>/nekoblog/source/_data/friends.json</code>文件中，一个友链就是在一个{}对象内的json数据，自行增添。</li>
</ul>
<h5 id="增加网址收藏"><a href="#增加网址收藏" class="headerlink" title="增加网址收藏"></a>增加网址收藏</h5><ul>
<li>网址收藏信息是存储在<code>/nekoblog/source/_data/collection.json</code>文件中，一个网址信息就是在一个{}对象内的json数据，自行增添。</li>
</ul>
<h4 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h4><p>其余页面自定义修改的内容不多，或者没必要修改，这里给出其余页面的对应文件，可自行根据需要定位到对应页面文件中进行修改。</p>
<ul>
<li><code>书单 -&gt; /themes/layout/books.ejs</code></li>
<li><code>留言板 -&gt; /themes/layout/contact.ejs</code></li>
<li><code>实战项目 -&gt; /themes/layout/project.ejs</code></li>
<li><code>博客打赏记录 -&gt; /themes/layout/donate.ejs</code></li>
<li><code>ticktack -&gt; /themes/layout/ticktack.ejs</code></li>
<li><code>实战项目 -&gt; /themes/layout/project.ejs</code></li>
<li><code>vlog -&gt; /themes/layout/videos.ejs</code><br>使用“ ctrl+F ”快捷键定位到<code>“ src=”//player.bilibili ”</code>，然后自行修改两个视频的src，建议使用B站的外链。</li>
<li><code>music -&gt; /themes/layout/musics.ejs</code><br>使用“ ctrl+F ”快捷键定位到<code>“ id=” ”</code>，然后自行修改两个歌单的id，建议使用网易云和QQ音乐的外链。</li>
<li><code>urls.txt -&gt; /nekoblog/urls.txt</code>将内容替换成自己网站的url地址即可。</li>
<li><code>网站2个_config.yml文件 -&gt; 主要是网站的总体配置，自行打开两个文件然后只修改里面的包含个人信息的部分，其余不动。</code></li>
</ul>
<h3 id="撰写第一篇文章"><a href="#撰写第一篇文章" class="headerlink" title="撰写第一篇文章"></a>撰写第一篇文章</h3><ul>
<li>修改完个人信息后，你便可以撰写属于你的第一篇文章啦。</li>
<li>文章采用markdown语法，所有文章存储在<code>/nekoblog/source/_posts</code>文件夹中。</li>
<li>这里我已给出常用的两类文章模板，可直接复制粘贴然后（修改文章名，链接后缀建议用英文，标签建议只用一个，分类，时间，以及文章banner图片）形成新的文章。</li>
</ul>
<h3 id="怎样开通评论"><a href="#怎样开通评论" class="headerlink" title="怎样开通评论"></a>怎样开通评论</h3><ul>
<li>本开源博客使用valine评论，环境以及搭好，只需填写valine配置数据即可。</li>
<li>自行根据网上教程得到配置数据，关键词 “ Hexo 博客添加 Valine 评论系统 ”，教程之一：<a href="https://www.zhyong.cn/posts/95cb/" target="_blank">Hexo 博客添加 Valine 评论系统</a></li>
<li>注意：本开源博客中已经搭好了环境，<code>比如valine.min.js，valine.ejs等文件已经存在，不用再根据教程添加这些文件</code>，只需根据教程步骤配置其余，然后获取到 APP ID 和 APP KEY。</li>
<li>然后，将获取到的 APP ID 和 APP KEY，在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ valine ”</code>，然后自行修改appId，appKey值即可。</li>
<li>多说一句，若最后评论功能总是报错，不知道怎么弄，那么建议一切根据外链教程（这个不行，换个完整版教程）操作，可替换本博客已经存在的环境文件，<code>学会自己独立使用浏览器解决问题</code>。</li>
</ul>
<h3 id="网站怎样上线"><a href="#网站怎样上线" class="headerlink" title="网站怎样上线"></a>网站怎样上线</h3><ul>
<li><p><code>免费版 使用gitee免费托管</code><br>关键词，“ Hexo部署到Gitee ”，随机教程：<a href="https://blog.csdn.net/qq_38157825/article/details/112783631" target="_blank">Hexo 部署到 Gitee</a></p>
</li>
<li><p><code>收费版 自行购买域名服务器</code><br>关键词，“ Hexo部署到自己服务器 ”</p>
</li>
</ul>
<h3 id="七零八碎补充"><a href="#七零八碎补充" class="headerlink" title="七零八碎补充"></a>七零八碎补充</h3><p>可自行根据需要定位到对应文件中进行修改。</p>
<ul>
<li><p><code>赞赏二维码图片 -&gt; /themes/source/medias/reward</code></p>
</li>
<li><p><code>鼠标左键点击文字 -&gt; /themes/source/js/click_show_text.js</code></p>
</li>
<li><p><code>网站标题栏和footer栏背景颜色 -&gt; /themes/source/css/matery.css</code><br>在该文件中使用“ ctrl+F ”快捷键定位到<code>“ 网站标题栏和footer栏背景颜色 ”</code>，然后自行修改颜色。</p>
</li>
<li><p><code>各大页面banner图 -&gt; 若你不想使用默认图片，将以下代码复制到对应页面ejs文件中并修改图片链接即可。</code></p>
</li>
</ul>
<pre><code>    &lt;style&gt;
      /* banner背景图 */
      .bg-cover &amp;#123;
          background-image: url(&quot;图片链接地址&quot;)!important;
      &amp;#125;
    &lt;/style&gt;
</code></pre><h3 id="怎样联系itsNeko"><a href="#怎样联系itsNeko" class="headerlink" title="怎样联系itsNeko"></a>怎样联系itsNeko</h3><ul>
<li>留言：itsNeko博客地址:<a href="https://dyfa.top/" target="_blank">itsNeko博客~</a></li>
<li>邮箱：nekodeng@qq.com</li>
<li>QQ: 2018854221</li>
</ul>
]]></content>
      <categories>
        <category>itsNeko博客食用方法</category>
      </categories>
      <tags>
        <tag>关于itsNeko开源博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用</title>
    <url>/posts/git_article.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">Git是目前世界上最先进的分布式版本控制系统（没有之一）。Git 是一个开源的分布式版本控制软件,用以有效、高速的处理从很小到非常大的项目版本管理。</div>

<h3 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h3><ul>
<li>Git是目前世界上最先进的分布式版本控制系统（没有之一）</li>
<li>Git 是一个开源的分布式版本控制软件,用以有效、高速的处理从很小到非常大的项目版本管理。</li>
<li>下载网址：<a href="https://git-scm.com" class="LinkCard" target="_blank">https://git-scm.com</a></li>
</ul>
<h3 id="从gitee或者github上边拉取项目"><a href="#从gitee或者github上边拉取项目" class="headerlink" title="从gitee或者github上边拉取项目"></a>从gitee或者github上边拉取项目</h3><ul>
<li>打开要拉取下来的仓库，克隆地址或下载安装包<br><img src="https://img.tvv.tw/2022/03/13/150c2f33d1da5.png" alt="克隆地址"></li>
<li>新建项目文件夹，右键打开<code>Git Bash Here</code></li>
<li>输入命令：<code>git clone 复制的仓库地址</code><pre><code>git clone 复制的仓库名称
</code></pre></li>
<li>若下载安装包(zip)，需要先初始化Git仓库</li>
</ul>
<h3 id="初始化Git仓库"><a href="#初始化Git仓库" class="headerlink" title="初始化Git仓库"></a>初始化Git仓库</h3><ul>
<li>打开项目文件夹，右键点击<code>Git Bash Here</code></li>
<li>输入命令：<code>git init</code><pre><code>git init
</code></pre></li>
</ul>
<h3 id="与远程仓库建立连接"><a href="#与远程仓库建立连接" class="headerlink" title="与远程仓库建立连接"></a>与远程仓库建立连接</h3><ul>
<li><code>git remote add origin 仓库地址 </code><pre><code>git remote add origin 仓库地址 //添加后，远程库的名字就是origin
</code></pre></li>
<li>下一步，就可以把本地库的所有内容推送到远程库上：<code>git push -u origin master</code><pre><code>git push -u origin master
//加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
</code></pre></li>
</ul>
<h3 id="配置基本信息"><a href="#配置基本信息" class="headerlink" title="配置基本信息"></a>配置基本信息</h3><ul>
<li>第一次在用，需要配置信息</li>
<li>配置用户名命令：<code>git config —global user.name “xxx”</code></li>
<li>配置邮箱命令：<code>git config —global user.email “xxx@”</code><pre><code>git config --global user.name &quot;xxx&quot;
git config --global user.email &quot;xxx@&quot;
</code></pre></li>
</ul>
<h3 id="Git常用到的方法"><a href="#Git常用到的方法" class="headerlink" title="Git常用到的方法"></a>Git常用到的方法</h3><h4 id="1-创建分支命令"><a href="#1-创建分支命令" class="headerlink" title="1.创建分支命令"></a>1.创建分支命令</h4><ul>
<li>创建分支<code>git branch 分支名称</code></li>
<li>创建分支并切换到该分支<code>git checkout -b 分支名称</code>或<code>git switch -c 分支名称</code></li>
</ul>
<pre><code>git branch 分支名称 // 创建分支
git checkout 分支名称 或 git switch 分支名称// 切换到分支
&lt;!-- =============== --&gt;
git checkout -b 分支名称 或 git switch -c 分支名称// 创建分支并切换到该分支
</code></pre><h4 id="2-查看分支"><a href="#2-查看分支" class="headerlink" title="2.查看分支"></a>2.查看分支</h4><ul>
<li>查看本地分支命令：<code>git branch</code></li>
<li>查看远端分支命令：<code>git branch -r</code></li>
<li>查看本地&amp;远端分支：<code>git branch -a</code></li>
</ul>
<pre><code>git branch // 查看本地分支
git branch -r // 查看远端分支
git branch -a // 查看本地&amp;远端分支
</code></pre><h4 id="3-合并分支"><a href="#3-合并分支" class="headerlink" title="3.合并分支"></a>3.合并分支</h4><p>当我们做好改动后，需要切换到主分支master，然后合并</p>
<ul>
<li>合并分支命令：<code>git merge 分支名称</code></li>
</ul>
<h4 id="4-解决合并分支时的冲突"><a href="#4-解决合并分支时的冲突" class="headerlink" title="4.解决合并分支时的冲突"></a>4.解决合并分支时的冲突</h4><p>我们在合并分支的时候难免会遇到，与同事修改同一处地方，这时候就会有冲突，我们需要手动修改。<br><img src="https://img.tvv.tw/2022/03/13/bc2d3918a261e.png" alt="冲突"></p>
<h4 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5.删除分支"></a>5.删除分支</h4><ul>
<li>删除分支命令：<code>git branch -D </code>分支名称</li>
</ul>
<h4 id="6-提交到远端"><a href="#6-提交到远端" class="headerlink" title="6.提交到远端"></a>6.提交到远端</h4><ul>
<li>提交到暂存区命令：<ol>
<li>提交所有文件到暂存区命令：<code>git add .</code></li>
<li>提交某个文件到暂存区命令：<code>git add 文件名称</code></li>
</ol>
</li>
</ul>
<pre><code>git add . //提交所有文件到暂存区
git add 文件名称 //提交某个文件到暂存区
</code></pre><ul>
<li>提交到本地仓库命令：<code>git commit -m “提交信息描述”</code></li>
</ul>
<pre><code>git commit -m &quot;提交信息描述&quot;
</code></pre><ul>
<li>推送本地分支提交到远端命令：<code>git push origin -u 分支名称</code></li>
<li>第一次提交加-u 此后 <code>git push origin 分支名称</code></li>
</ul>
<pre><code>git push origin -u 分支名称 //第一次提交
git push origin 分支名称 // 此后
</code></pre><ul>
<li>提交时候可能会遇到的问题</li>
</ul>
<pre><code>error: failed to push some refs to &#39;git@github.com:michaelliao/learngit.git&#39;
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: &#39;git pull ...&#39;) before pushing again.
hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.
</code></pre><p>需要先<code>git pull</code>把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：</p>
<pre><code>git pull
// 可能会遇到的问题：
There is no tracking information for the current branch. 
Please specify which branch you want to merge with. 
// git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
$ git branch --set-upstream-to=origin/dev dev
再 git pull
</code></pre><h4 id="7-拉取远端分支到本地"><a href="#7-拉取远端分支到本地" class="headerlink" title="7.拉取远端分支到本地"></a>7.拉取远端分支到本地</h4><ul>
<li>第一次：<code>git checkout -b 本地分支 origin/远程分支</code></li>
<li>此后：<code>git checkout 远程分支</code></li>
</ul>
<h4 id="8-贮藏"><a href="#8-贮藏" class="headerlink" title="8.贮藏"></a>8.贮藏</h4><p>有时候我们再写代码的时候，领导会要我们修改个bug，我们代码又没有写完，不可提交。这时候就可以用贮藏来保存代码。改完bug再回来写我们的项目。</p>
<ul>
<li>建贮藏命令：<code>git stash save ‘描述’</code></li>
</ul>
<pre><code>git stash save &#39;描述&#39;
</code></pre><ul>
<li>查看贮藏命令：<code>git stash list</code></li>
</ul>
<pre><code>git stash list
</code></pre><ul>
<li>使用贮藏命令：<code>git stash apply stash@&#123;索引&#125;</code></li>
</ul>
<pre class=" language-lang-html"><code class="language-lang-html">git stash apply stash@&#123;索引&#125;
</code></pre>
<ul>
<li>删除贮藏命令：<code>git stash drop stash@&#123;索引&#125;</code></li>
</ul>
<pre class=" language-lang-html"><code class="language-lang-html">git stash drop stash@&#123;索引&#125;
</code></pre>
<h4 id="9-查看状态"><a href="#9-查看状态" class="headerlink" title="9.查看状态"></a>9.查看状态</h4><ul>
<li>查看当前工作状态命令：<code>git status</code> 看看那些需要更新</li>
<li>查看commit全部日志命令：<code>git log</code></li>
<li>查看commit日志命令一行(当提交数量很大的时候非常有用)：<code>git log —pretty=oneline </code></li>
</ul>
<h4 id="10-版本回滚"><a href="#10-版本回滚" class="headerlink" title="10.版本回滚"></a>10.版本回滚</h4><ul>
<li>恢复暂存区和HEAD一致命令：<code>git reset HEAD</code></li>
<li>恢复暂存区指定文件与HEAD一致命令：<code>git reset HEAD — 文件名</code></li>
<li>恢复工作区指定文件与暂存区一致命令：<code>git checkout — 文件名称</code></li>
<li>恢复工作区所有文件与暂存区一致命令：<code>git checkout .</code></li>
<li>回退到指定commit：<code>git reset —hard commit哈希值</code><h3 id="更详细的可阅读廖雪峰网站"><a href="#更详细的可阅读廖雪峰网站" class="headerlink" title="更详细的可阅读廖雪峰网站"></a>更详细的可阅读廖雪峰网站</h3><a href="https://www.liaoxuefeng.com/wiki/896043488029600" class="LinkCard" target="_blank">廖雪峰网站地址</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>清除浮动</title>
    <url>/posts/clear_article.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">清除浮动主要是为了解决，父元素因为子级元素浮动引起的内部高度为0的问题（父元素高度塌陷）</div>

<h3 id="1-额外标签法（在最后一个浮动标签后，新加一个标签，给其设置clear：both；）（不推荐）"><a href="#1-额外标签法（在最后一个浮动标签后，新加一个标签，给其设置clear：both；）（不推荐）" class="headerlink" title="1.额外标签法（在最后一个浮动标签后，新加一个标签，给其设置clear：both；）（不推荐）"></a>1.额外标签法（在最后一个浮动标签后，新加一个标签，给其设置clear：both；）（不推荐）</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        .box1&amp;#123;
            background-color: red;
            border: 1px solid #000;

        &amp;#125;
        .box2&amp;#123;
            margin-top: 10px;
            background-color: pink;
            border: 1px solid #000;
            height: 100px;
        &amp;#125;
        .left &amp;#123;
            float: left;
            width: 20%;
            height: 200px;
            background-color: aqua;
        &amp;#125;

        .right &amp;#123;
            float: right;
            width: 30%;
            height: 80px;
            background-color: blueviolet;
        &amp;#125;
        .clearfix&amp;#123;
            clear: both;
        &amp;#125;
        /* 
        结尾处加空div标签：
            原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度 
            优点：
            缺点：
            建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法 
        */
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;box1&quot;&gt;
        &lt;div class=&quot;left&quot;&gt;LEFT&lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;RIGHT&lt;/div&gt;
        &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;box2&quot;&gt;
        box2
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><ul>
<li>优点：简单、代码少、浏览器支持好、不容易出现怪问题 </li>
<li>缺点：不少初学者不理解原理；如果页面浮动布局多，就要增加很多空div（无意义标签），语义化差</li>
</ul>
<h3 id="2-父级添加overflow属性（父元素添加overflow-hidden）（不推荐）"><a href="#2-父级添加overflow属性（父元素添加overflow-hidden）（不推荐）" class="headerlink" title="2.父级添加overflow属性（父元素添加overflow:hidden）（不推荐）"></a>2.父级添加overflow属性（父元素添加overflow:hidden）（不推荐）</h3><ul>
<li>原理：通过触发BFC方式，实现清除浮动</li>
</ul>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        .box1&amp;#123;
            background-color: red;
            border: 1px solid #000;
            width: 98%;
            overflow: hidden;/* 解决代码 */
        &amp;#125;
        .box2&amp;#123;
            margin-top: 10px;
            background-color: pink;
            border: 1px solid #000;
            height: 100px;
            width: 98%;
        &amp;#125;
        .left &amp;#123;
            float: left;
            width: 20%;
            height: 200px;
            background-color: aqua;
        &amp;#125;

        .right &amp;#123;
            float: right;
            width: 30%;
            height: 80px;
            background-color: blueviolet;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;box1&quot;&gt;
        &lt;div class=&quot;left&quot;&gt;LEFT&lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;RIGHT&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;box2&quot;&gt;
        box2
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><ul>
<li>优点：简单、代码少、浏览器支持好</li>
<li>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏。 </li>
</ul>
<h3 id="3-父div定义overflow：auto"><a href="#3-父div定义overflow：auto" class="headerlink" title="3.父div定义overflow：auto"></a>3.父div定义overflow：auto</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        .box1&amp;#123;
            background-color: red;
            border: 1px solid #000;
            width: 98%;
            overflow: auto;/* 解决代码 */
        &amp;#125;
        .box2&amp;#123;
            margin-top: 10px;
            background-color: pink;
            border: 1px solid #000;
            height: 100px;
            width: 98%;
        &amp;#125;
        .left &amp;#123;
            float: left;
            width: 20%;
            height: 200px;
            background-color: aqua;
        &amp;#125;

        .right &amp;#123;
            float: right;
            width: 30%;
            height: 80px;
            background-color: blueviolet;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;box1&quot;&gt;
        &lt;div class=&quot;left&quot;&gt;LEFT&lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;RIGHT&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;box2&quot;&gt;
        box2
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><ul>
<li>优点：简单、代码少、浏览器支持好</li>
<li>缺点：内部宽高超过父级div时，会出现滚动条。 </li>
</ul>
<h3 id="4-父div一起浮动"><a href="#4-父div一起浮动" class="headerlink" title="4.父div一起浮动"></a>4.父div一起浮动</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        .box1&amp;#123;
            background-color: red;
            border: 1px solid #000;
            width: 98%;
            /* 解决代码 */
            margin-bottom: 10px;
            float: left;
        &amp;#125;
        .box2&amp;#123;
            background-color: pink;
            border: 1px solid #000;
            height: 100px;
            width: 98%;
            /* 解决代码 */
            clear:both
        &amp;#125;
        .left &amp;#123;
            float: left;
            width: 20%;
            height: 200px;
            background-color: aqua;
        &amp;#125;

        .right &amp;#123;
            float: right;
            width: 30%;
            height: 80px;
            background-color: blueviolet;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;box1&quot;&gt;
        &lt;div class=&quot;left&quot;&gt;LEFT&lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;RIGHT&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;box2&quot;&gt;
        box2
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><ul>
<li>优点：没有优点 </li>
<li>缺点：会产生新的浮动问题。 </li>
</ul>
<h3 id="5-结尾处加-br标签-clear-both-不推荐使用，只作了解。"><a href="#5-结尾处加-br标签-clear-both-不推荐使用，只作了解。" class="headerlink" title="5.结尾处加 br标签 clear:both 不推荐使用，只作了解。"></a>5.结尾处加 br标签 clear:both 不推荐使用，只作了解。</h3><ul>
<li>原理：父级div定义zoom:1来解决IE浮动问题，结尾处加 br标签 clear:both </li>
</ul>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        .box1&amp;#123;
            background-color: red;
            border: 1px solid #000;
            margin-bottom: 10px;
            zoom:1
        &amp;#125;
        .box2&amp;#123;
            background-color: pink;
            border: 1px solid #000;
            height: 100px;
        &amp;#125;
        .left &amp;#123;
            float: left;
            width: 20%;
            height: 200px;
            background-color: aqua;
        &amp;#125;

        .right &amp;#123;
            float: right;
            width: 30%;
            height: 80px;
            background-color: blueviolet;
        &amp;#125;
        /* 解决代码 */
        .clearfix&amp;#123;
            clear: both;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;box1&quot;&gt;
        &lt;div class=&quot;left&quot;&gt;LEFT&lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;RIGHT&lt;/div&gt;
        &lt;br class=&quot;clearfix&quot;/&gt;
    &lt;/div&gt;
    &lt;div class=&quot;box2&quot;&gt;
        box2
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="6-伪类清除方法-常用"><a href="#6-伪类清除方法-常用" class="headerlink" title="6.伪类清除方法 常用"></a>6.伪类清除方法 常用</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        .div1 &amp;#123;
            background-color: red;
            border: 1px solid #000;
        &amp;#125;

        .div2 &amp;#123;
            height: 100px;
            margin-top: 10px;
            background-color: pink;
            border: 1px solid #000;
        &amp;#125;

        .left &amp;#123;
            float: left;
            width: 20%;
            height: 200px;
            background-color: aqua;
        &amp;#125;

        .right &amp;#123;
            float: right;
            width: 30%;
            height: 80px;
            background-color: blueviolet;
        &amp;#125;
        /* 简写 */
        .clearfix::after&amp;#123;
            content: &quot;&quot;;
            display: block;
            clear: both;
        &amp;#125;
        .clearfix &amp;#123;
            *zoom: 1
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;div1 clearfix&quot;&gt;
        &lt;div class=&quot;left&quot;&gt;Left&lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;Right&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;div2&quot;&gt; div2 &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><ul>
<li>优点：浏览器支持好、不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等） </li>
<li>缺点：代码多、不少初学者不理解原理，要两句代码结合使用才能让主流浏览器都支持。 </li>
</ul>
<h3 id="7-给父div定义height（不推荐使用，只建议高度固定的布局时使用）"><a href="#7-给父div定义height（不推荐使用，只建议高度固定的布局时使用）" class="headerlink" title="7.给父div定义height（不推荐使用，只建议高度固定的布局时使用）"></a>7.给父div定义height（不推荐使用，只建议高度固定的布局时使用）</h3><ul>
<li>原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。</li>
</ul>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        .box1&amp;#123;
            background-color: red;
            border: 1px solid #000;
            height: 200px;/* 解决代码 */
        &amp;#125;
        .box2&amp;#123;
            margin-top: 10px;
            background-color: pink;
            border: 1px solid #000;
        &amp;#125;
        .left &amp;#123;
            float: left;
            width: 20%;
            height: 200px;
            background-color: aqua;
        &amp;#125;

        .right &amp;#123;
            float: right;
            width: 30%;
            height: 80px;
            background-color: blueviolet;
        &amp;#125;
        /* 
        给父div定义height：



            建议： 
        */
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;box1&quot;&gt;
        &lt;div class=&quot;left&quot;&gt;LEFT&lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;RIGHT&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;box2&quot;&gt;
        box2
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><ul>
<li>优点：简单、代码少、容易掌握 </li>
<li>缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题 </li>
</ul>
<h3 id="8-父div定义display-table-不推荐使用，只作了解"><a href="#8-父div定义display-table-不推荐使用，只作了解" class="headerlink" title="8. 父div定义display table 不推荐使用，只作了解"></a>8. 父div定义display table 不推荐使用，只作了解</h3><ul>
<li>原理：将div属性变成表格 </li>
</ul>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        .box1&amp;#123;
            background-color: red;
            border: 1px solid #000;
            width: 98%;
            /* 解决代码 */
            margin-bottom: 10px;
            display: table;
        &amp;#125;
        .box2&amp;#123;
            background-color: pink;
            border: 1px solid #000;
            height: 100px;
            width: 98%;
        &amp;#125;
        .left &amp;#123;
            float: left;
            width: 20%;
            height: 200px;
            background-color: aqua;
        &amp;#125;

        .right &amp;#123;
            float: right;
            width: 30%;
            height: 80px;
            background-color: blueviolet;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;box1&quot;&gt;
        &lt;div class=&quot;left&quot;&gt;LEFT&lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;RIGHT&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;box2&quot;&gt;
        box2
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><ul>
<li>优点：没有优点  </li>
<li>缺点：会产生新的未知问题。 </li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>盒子居中</title>
    <url>/posts/vertical_article.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">盒子居中的几种方法，定位，弹性盒子，display</div>

<h3 id="1-定位方法"><a href="#1-定位方法" class="headerlink" title="1.定位方法"></a>1.定位方法</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        body &amp;#123;
            margin: 0;
        &amp;#125;

        .fu &amp;#123;
            position: relative;
            width: 500px;
            height: 500px;
            border: 1px solid #000;
        &amp;#125;

        .zi &amp;#123;
            width: 200px;
            height: 200px;
            position: absolute;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
            margin: auto;
            background-color: blueviolet;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;fu&quot;&gt;
        &lt;div class=&quot;zi&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><h3 id="2-定位平移方法（transform）"><a href="#2-定位平移方法（transform）" class="headerlink" title="2.定位平移方法（transform）"></a>2.定位平移方法（transform）</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        body &amp;#123;
            margin: 0;
        &amp;#125;

        .fu &amp;#123;
            position: relative;
            width: 500px;
            height: 500px;
            border: 1px solid #000;
        &amp;#125;

        .zi &amp;#123;
            width: 200px;
            height: 200px;
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            background-color: blueviolet;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;fu&quot;&gt;
        &lt;div class=&quot;zi&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><h3 id="3-定位平移第二种（margin）"><a href="#3-定位平移第二种（margin）" class="headerlink" title="3.定位平移第二种（margin）"></a>3.定位平移第二种（margin）</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        body &amp;#123;
            margin: 0;
        &amp;#125;

        .fu &amp;#123;
            position: relative;
            width: 500px;
            height: 500px;
            border: 1px solid #000;
        &amp;#125;

        .zi &amp;#123;
            width: 200px;
            height: 200px;
            position: absolute;
            top: 50%;
            left: 50%;
            margin-left: -100px;
            margin-top: -100px;
            background-color:blueviolet;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;fu&quot;&gt;
        &lt;div class=&quot;zi&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><h3 id="4-定位平移的第三种方法（css3）"><a href="#4-定位平移的第三种方法（css3）" class="headerlink" title="4.定位平移的第三种方法（css3）"></a>4.定位平移的第三种方法（css3）</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        body &amp;#123;
            margin: 0;
        &amp;#125;

        .fu &amp;#123;
            position: relative;
            width: 500px;
            height: 500px;
            border: 1px solid #000;
        &amp;#125;

        .zi &amp;#123;
            width: 200px;
            height: 200px;
            position: absolute;
            /* 注：减号前后一定要有空格 */
            left: calc(50% - 100px);
            /* 减去自身宽度的一半 */
            top: calc(50% - 100px);
            /* 减去自身高度的一半 */
            background-color: blueviolet;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;fu&quot;&gt;
        &lt;div class=&quot;zi&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><h3 id="5-弹性盒子"><a href="#5-弹性盒子" class="headerlink" title="5.弹性盒子"></a>5.弹性盒子</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        body &amp;#123;
            margin: 0;
        &amp;#125;

        .fu &amp;#123;
            display: flex;
            width: 500px;
            height: 500px;
            align-items: center;
            justify-content: center;
            border: 1px solid #000;
        &amp;#125;

        .zi &amp;#123;
            width: 200px;
            height: 200px;
            background-color: blueviolet;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;fu&quot;&gt;
        &lt;div class=&quot;zi&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><h3 id="6-弹性盒子第二种"><a href="#6-弹性盒子第二种" class="headerlink" title="6.弹性盒子第二种"></a>6.弹性盒子第二种</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        body &amp;#123;
            margin: 0;
        &amp;#125;

        .fu &amp;#123;
            display: flex;
            width: 500px;
            height: 500px;
            border: 1px solid #000;
        &amp;#125;

        .zi &amp;#123;
            display: flex;
            width: 200px;
            height: 200px;
            background-color: blueviolet;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;fu&quot;&gt;
        &lt;div class=&quot;zi&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><h3 id="7-display-webkit-box"><a href="#7-display-webkit-box" class="headerlink" title="7.display: -webkit-box;"></a>7.display: -webkit-box;</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        body &amp;#123;
            margin: 0;
        &amp;#125;

        .fu &amp;#123;
            display: -webkit-box;
            -webkit-box-pack: center;
            -webkit-box-align: center;
            width: 500px;
            height: 500px;
            border: 1px solid #000;
        &amp;#125;

        .zi &amp;#123;
            width: 200px;
            height: 200px;
            background-color: rgb(77, 58, 95);
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;fu&quot;&gt;
        &lt;div class=&quot;zi&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><h3 id="8-display-webkit-box"><a href="#8-display-webkit-box" class="headerlink" title="8.display: -webkit-box;"></a>8.display: -webkit-box;</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        body &amp;#123;
            margin: 0;
        &amp;#125;

        .fu &amp;#123;
            display: -webkit-box;
            width: 500px;
            height: 500px;
            border: 1px solid #000;
        &amp;#125;

        .zi &amp;#123;
            width: 200px;
            height: 200px;
            background-color: blueviolet;
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;fu&quot;&gt;
        &lt;div class=&quot;zi&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><h3 id="9-利用table的特征，只对表格有效"><a href="#9-利用table的特征，只对表格有效" class="headerlink" title="9.利用table的特征，只对表格有效"></a>9.利用table的特征，只对表格有效</h3><ul>
<li>*在子元素没有设置宽高度和数量时使用。</li>
<li>注意：table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height。</li>
</ul>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        body &amp;#123;
            margin: 0;
        &amp;#125;

        .fu &amp;#123;
            display: table-cell;
            vertical-align: middle;
            text-align: center;
            width: 500px;
            height: 500px;
            border: 1px solid #000;
        &amp;#125;

        .zi &amp;#123;
            width: 200px;
            height: 200px;
            display: inline-block;
            background-color: rgb(77, 58, 95);
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;fu&quot;&gt;
        &lt;div class=&quot;zi&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><h3 id="10-grid布局"><a href="#10-grid布局" class="headerlink" title="10.grid布局"></a>10.grid布局</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        body &amp;#123;
            margin: 0;
        &amp;#125;

        .fu &amp;#123;
            width: 500px;
            height: 500px;
            display: grid;
            border: 1px solid #000;
        &amp;#125;

        .zi &amp;#123;
            width: 200px;
            height: 200px;
            justify-self:center; 
            align-self:center; 
            background-color: rgb(77, 58, 95);
        &amp;#125;
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;fu&quot;&gt;
        &lt;div class=&quot;zi&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>这是技术文章模板</title>
    <url>/posts/articletemplate.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言，技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言。</div>

<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul>
<li>项目1</li>
<li>项目2</li>
<li>项目3</li>
</ul>
<p>正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文</p>
<p><img src="/posts/articletemplate.htm/图片url" alt="图片介绍"></p>
<p><code>正文一些需要高亮色的文字</code></p>
<p><a href="链接地址" class="LinkCard" target="_blank">引入链接</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>这是随笔文章模板</title>
    <url>/posts/essay-demo.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="这是博主的随笔板块，后续会更新文章，目前弄好了模板格式"><a href="#这是博主的随笔板块，后续会更新文章，目前弄好了模板格式" class="headerlink" title="这是博主的随笔板块，后续会更新文章，目前弄好了模板格式~"></a>这是博主的随笔板块，后续会更新文章，目前弄好了模板格式~</h4><div class="ipage">
    <div class="ititle">节选自《你若安好便是晴天》- 前言</div>
  <div class="izhengwen">
  <p>几场梅雨，几卷荷风，江南已是烟水迷离。小院里湿润的青苔在雨中纯净生长。这个季节，许多人都在打听关于莲荷的消息，以及茉莉在黄昏浮动的神秘幽香。不知多少人会记得有个女子，曾经走过人间四月天，又与莲开的夏季有过相濡以沫的约定。</p>

  <p>一个人，一本书，一杯茶，一帘梦。有时候，寂寞是这样叫人心动，也只有此刻，世事才会如此波澜不惊。凉风吹起书页，这烟雨让尘封在书卷里的词章和故事弥漫着潮湿的气息。独倚幽窗，看转角处的青石小巷，一柄久违的油纸伞，遮住了低过屋檐的光阴。</p>

  <p>时光微凉，那一场远去的往事被春水浸泡，秋风吹拂，早已洗去铅华，清绝明净。以为历经人生匆匆聚散，尝过尘世种种烟火，应该承担岁月带给我们的沧桑。可流年分明安然无恙，而山石草木是这样毫发无伤。只是曾经许过地老天荒的城，在细雨中越发地清瘦单薄。</p>

  <p>青梅煎好的茶水，还是当年的味道；而我们等候的人，不会再来。后来才知道，那一袭素色白衣的女子已化身为燕，去寻觅水乡旧巢。她走过的地方，有一树一树的花开，她呢喃的梁间，还留着余温犹存的梦。有人说，她是个冰洁的女子，所以无论人世如何变迁，她都有着美丽的容颜。有人说，她是个理智的女子，不管面临怎样的诱惑，最后都可以全身而退。</p>

  <p>她叫林徽因，出生于杭州，是许多人梦中期待的白莲。她在雨雾之都伦敦，发生过一场空前绝后的康桥之恋。她爱过三个男子，爱得清醒，也爱得平静。徐志摩为她徜徉在康桥，深情地等待一场旧梦可以归来。梁思成与她携手走过千山万水，为完成使命而相约白头。金岳霖为她终身不娶，痴心不改地守候一世。可她懂得人生飘忽不定，要学会随遇而安。</p>

  </div>
</div>



]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
